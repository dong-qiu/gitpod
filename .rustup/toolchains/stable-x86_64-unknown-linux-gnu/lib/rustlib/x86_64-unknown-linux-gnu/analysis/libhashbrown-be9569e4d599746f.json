{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":false,"distro_crate":true,"signatures":false,"borrow_data":false},"version":"0.19.0","compilation":{"directory":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0","program":"/checkout/obj/build/x86_64-unknown-linux-gnu/stage1/bin/rustc","arguments":["--edition=2018","--crate-name","hashbrown","/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","--color","always","--crate-type","lib","--emit=dep-info,metadata,link","-C","opt-level=2","--cfg","feature=\"alloc\"","--cfg","feature=\"compiler_builtins\"","--cfg","feature=\"core\"","--cfg","feature=\"default\"","--cfg","feature=\"nightly\"","--cfg","feature=\"rustc-dep-of-std\"","-C","metadata=be9569e4d599746f-rustc","-C","extra-filename=-be9569e4d599746f","--out-dir","/checkout/obj/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps","--target","x86_64-unknown-linux-gnu","-C","linker=clang","-L","dependency=/checkout/obj/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps","-L","dependency=/checkout/obj/build/x86_64-unknown-linux-gnu/stage1-std/release/deps","--extern","compiler_builtins=/checkout/obj/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/libcompiler_builtins-9fc4b5be2ba5cc19.rlib","--extern","alloc=/checkout/obj/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/librustc_std_workspace_alloc-47d8845cef2a3bc5.rlib","--extern","core=/checkout/obj/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/librustc_std_workspace_core-aee5c24fff305dea.rlib","--cap-lints","allow","-L","native=/checkout/obj/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/build/compiler_builtins-82bdba910d254c8e/out","-Cdebuginfo=1","--sysroot","/checkout/obj/build/x86_64-unknown-linux-gnu/stage1","-Zexternal-macro-backtrace","-Cprefer-dynamic","-Clinker=clang","-C","debug-assertions=n","-C","codegen-units=1","-Zsave-analysis","-C","link-args=-Wl,-rpath,$ORIGIN/../lib","-Zunstable-options","-Z","force-unstable-if-unmarked","-Dwarnings","-Dbare_trait_objects","-Drust_2018_idioms"],"output":"/checkout/obj/build/x86_64-unknown-linux-gnu/stage1-std/x86_64-unknown-linux-gnu/release/deps/libhashbrown-be9569e4d599746f.rmeta"},"prelude":{"crate_id":{"name":"hashbrown","disambiguator":[9386824491997906070,17212049238264027415]},"crate_root":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src","external_crates":[{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","num":1,"id":{"name":"rustc_std_workspace_core","disambiguator":[13012427356130990406,14608520140697239788]}},{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[3916277366462804126,4478459115610208312]}},{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[1713477286964588179,15844277248566971785]}},{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[16927035401729681780,12437521449932722366]}},{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6447241057134257354,1413806012037948949]}}],"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":0,"byte_end":2639,"line_start":1,"line_end":93,"column_start":1,"column_end":2}},"imports":[{"kind":"Use","ref_id":{"krate":0,"index":24},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":8403,"byte_end":8416,"line_start":11,"line_end":11,"column_start":20,"column_end":33},"alias_span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":8420,"byte_end":8438,"line_start":11,"line_end":11,"column_start":37,"column_end":55},"name":"DefaultHashBuilder","value":"","parent":{"krate":0,"index":41}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":1314,"byte_end":1315,"line_start":52,"line_end":52,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1361}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":1391,"byte_end":1392,"line_start":55,"line_end":55,"column_start":33,"column_end":34},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1361}},{"kind":"GlobUse","ref_id":null,"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":1867,"byte_end":1868,"line_start":69,"line_end":69,"column_start":25,"column_end":26},"alias_span":null,"name":"*","value":"","parent":{"krate":0,"index":1364}},{"kind":"Use","ref_id":{"krate":0,"index":1368},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":2250,"byte_end":2257,"line_start":82,"line_end":82,"column_start":21,"column_end":28},"alias_span":null,"name":"HashMap","value":"","parent":{"krate":0,"index":0}},{"kind":"Use","ref_id":{"krate":0,"index":1424},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":2279,"byte_end":2286,"line_start":83,"line_end":83,"column_start":21,"column_end":28},"alias_span":null,"name":"HashSet","value":"","parent":{"krate":0,"index":0}}],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":0,"byte_end":2639,"line_start":1,"line_end":93,"column_start":1,"column_end":2},"name":"","qualname":"::","value":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":12},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":16},{"krate":0,"index":17},{"krate":0,"index":41},{"krate":0,"index":654},{"krate":0,"index":909},{"krate":0,"index":1023},{"krate":0,"index":1048},{"krate":0,"index":1361},{"krate":0,"index":1364},{"krate":0,"index":1366},{"krate":0,"index":1367},{"krate":0,"index":1432},{"krate":0,"index":1443},{"krate":0,"index":1441},{"krate":0,"index":1439},{"krate":0,"index":1437}],"decl_id":null,"docs":" This crate is a Rust port of Google's high-performance [SwissTable] hash\n map, adapted to make it a drop-in replacement for Rust's standard `HashMap`\n and `HashSet` types.","sig":null,"attributes":[{"value":"no_std","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":555,"byte_end":565,"line_start":12,"line_end":12,"column_start":1,"column_end":11}},{"value":"feature(alloc_layout_extra,\n          allocator_api,\n          ptr_offset_from,\n          test,\n          core_intrinsics,\n          dropck_eyepatch)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":608,"byte_end":761,"line_start":15,"line_end":22,"column_start":5,"column_end":6}},{"value":"warn(missing_docs)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":765,"byte_end":787,"line_start":24,"line_end":24,"column_start":1,"column_end":23}},{"value":"allow(clippy::module_name_repetitions)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":788,"byte_end":830,"line_start":25,"line_end":25,"column_start":1,"column_end":43}},{"value":"warn(rust_2018_idioms)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":831,"byte_end":857,"line_start":26,"line_end":26,"column_start":1,"column_end":27}}]},{"kind":"Type","id":{"krate":0,"index":24},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/fx.rs","byte_start":4766,"byte_end":4779,"line_start":9,"line_end":9,"column_start":10,"column_end":23},"name":"FxHashBuilder","qualname":"::fx::FxHashBuilder","value":"BuildHasherDefault<FxHasher>","parent":null,"children":[],"decl_id":null,"docs":" Type alias for a `HashBuilder` using the `fx` hash algorithm.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":25},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/fx.rs","byte_start":5531,"byte_end":5539,"line_start":22,"line_end":22,"column_start":12,"column_end":20},"name":"FxHasher","qualname":"::fx::FxHasher","value":"FxHasher {  }","parent":null,"children":[{"krate":0,"index":26}],"decl_id":null,"docs":" A speedy hash algorithm for use within rustc. The hashmap in liballoc\n by default uses SipHash which isn't quite as speedy as we want. In the\n compiler we're not really worried about DOS attempts, so we use a fast\n non-cryptographic hash.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1368},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":14731,"byte_end":14738,"line_start":188,"line_end":188,"column_start":12,"column_end":19},"name":"HashMap","qualname":"::map::HashMap","value":"HashMap {  }","parent":null,"children":[{"krate":0,"index":1372},{"krate":0,"index":1373}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":70},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":15440,"byte_end":15443,"line_start":213,"line_end":213,"column_start":12,"column_end":15},"name":"new","qualname":"<HashMap<K, V, DefaultHashBuilder>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":15419,"byte_end":15428,"line_start":212,"line_end":212,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":71},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":15898,"byte_end":15911,"line_start":229,"line_end":229,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashMap<K, V, DefaultHashBuilder>>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":15877,"byte_end":15886,"line_start":228,"line_end":228,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":76},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":16802,"byte_end":16813,"line_start":256,"line_end":256,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashMap<K, V, S>>::with_hasher","value":"fn (hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` which will use the given hash builder to hash\n keys.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":16781,"byte_end":16790,"line_start":255,"line_end":255,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":77},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":17804,"byte_end":17828,"line_start":285,"line_end":285,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashMap<K, V, S>>::with_capacity_and_hasher","value":"fn (capacity: usize, hash_builder: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashMap` with the specified capacity, using `hash_builder`\n to hash the keys.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":17783,"byte_end":17792,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":78},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":18486,"byte_end":18492,"line_start":307,"line_end":307,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashMap<K, V, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the map's [`BuildHasher`].","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":18465,"byte_end":18474,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":79},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":19001,"byte_end":19009,"line_start":324,"line_end":324,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashMap<K, V, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":18980,"byte_end":18989,"line_start":323,"line_end":323,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":80},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":19498,"byte_end":19502,"line_start":346,"line_end":346,"column_start":12,"column_end":16},"name":"keys","qualname":"<HashMap<K, V, S>>::keys","value":"fn (&self) -> Keys<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all keys in arbitrary order.\n The iterator element type is `&'a K`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":19477,"byte_end":19486,"line_start":345,"line_end":345,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":81},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":20010,"byte_end":20016,"line_start":368,"line_end":368,"column_start":12,"column_end":18},"name":"values","qualname":"<HashMap<K, V, S>>::values","value":"fn (&self) -> Values<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values in arbitrary order.\n The iterator element type is `&'a V`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":19989,"byte_end":19998,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":82},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":20634,"byte_end":20644,"line_start":395,"line_end":395,"column_start":12,"column_end":22},"name":"values_mut","qualname":"<HashMap<K, V, S>>::values_mut","value":"fn (&mut self) -> ValuesMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all values mutably in arbitrary order.\n The iterator element type is `&'a mut V`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":20613,"byte_end":20622,"line_start":394,"line_end":394,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":83},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":21232,"byte_end":21236,"line_start":419,"line_end":419,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashMap<K, V, S>>::iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order.\n The iterator element type is `(&'a K, &'a V)`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":21211,"byte_end":21220,"line_start":418,"line_end":418,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":84},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":22101,"byte_end":22109,"line_start":453,"line_end":453,"column_start":12,"column_end":20},"name":"iter_mut","qualname":"<HashMap<K, V, S>>::iter_mut","value":"fn (&mut self) -> IterMut<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all key-value pairs in arbitrary order,\n with mutable references to the values.\n The iterator element type is `(&'a K, &'a mut V)`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":22080,"byte_end":22089,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":85},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":22756,"byte_end":22759,"line_start":482,"line_end":482,"column_start":12,"column_end":15},"name":"len","qualname":"<HashMap<K, V, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the map.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":22735,"byte_end":22744,"line_start":481,"line_end":481,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":86},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":23115,"byte_end":23123,"line_start":499,"line_end":499,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashMap<K, V, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains no elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":23094,"byte_end":23103,"line_start":498,"line_end":498,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":87},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":23681,"byte_end":23686,"line_start":523,"line_end":523,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashMap<K, V, S>>::drain","value":"fn (&mut self) -> Drain<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, returning all key-value pairs as an iterator. Keeps the\n allocated memory for reuse.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":23660,"byte_end":23669,"line_start":522,"line_end":522,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":88},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":24223,"byte_end":24228,"line_start":546,"line_end":546,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashMap<K, V, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the map, removing all key-value pairs. Keeps the allocated memory\n for reuse.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":24202,"byte_end":24211,"line_start":545,"line_end":545,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":93},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":24915,"byte_end":24922,"line_start":574,"line_end":574,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashMap<K, V, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashMap`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":24894,"byte_end":24903,"line_start":573,"line_end":573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":95},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":25700,"byte_end":25711,"line_start":597,"line_end":597,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashMap<K, V, S>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), CollectionAllocErr>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashMap<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":25679,"byte_end":25688,"line_start":596,"line_end":596,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":97},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":26498,"byte_end":26511,"line_start":620,"line_end":620,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashMap<K, V, S>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":26477,"byte_end":26486,"line_start":619,"line_end":619,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":99},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":27484,"byte_end":27493,"line_start":649,"line_end":649,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashMap<K, V, S>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the map with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":27463,"byte_end":27472,"line_start":648,"line_end":648,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":101},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":28253,"byte_end":28258,"line_start":675,"line_end":675,"column_start":12,"column_end":17},"name":"entry","qualname":"<HashMap<K, V, S>>::entry","value":"fn (&mut self, key: K) -> Entry<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":28232,"byte_end":28241,"line_start":674,"line_end":674,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":103},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":29383,"byte_end":29386,"line_start":712,"line_end":712,"column_start":12,"column_end":15},"name":"get","qualname":"<HashMap<K, V, S>>::get","value":"fn <Q> (&self, k: &Q) -> Option<&V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":29362,"byte_end":29371,"line_start":711,"line_end":711,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":106},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":30229,"byte_end":30242,"line_start":740,"line_end":740,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<HashMap<K, V, S>>::get_key_value","value":"fn <Q> (&self, k: &Q) -> Option<(&K, &V)>","parent":null,"children":[],"decl_id":null,"docs":" Returns the key-value pair corresponding to the supplied key.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":30208,"byte_end":30217,"line_start":739,"line_end":739,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":110},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":31283,"byte_end":31295,"line_start":774,"line_end":774,"column_start":12,"column_end":24},"name":"contains_key","qualname":"<HashMap<K, V, S>>::contains_key","value":"fn <Q> (&self, k: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the map contains a value for the specified key.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":31262,"byte_end":31271,"line_start":773,"line_end":773,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":112},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":32111,"byte_end":32118,"line_start":804,"line_end":804,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<HashMap<K, V, S>>::get_mut","value":"fn <Q> (&mut self, k: &Q) -> Option<&mut V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a mutable reference to the value corresponding to the key.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":32090,"byte_end":32099,"line_start":803,"line_end":803,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":116},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":33354,"byte_end":33360,"line_start":841,"line_end":841,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashMap<K, V, S>>::insert","value":"fn (&mut self, k: K, v: V) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a key-value pair into the map.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":33333,"byte_end":33342,"line_start":840,"line_end":840,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":34542,"byte_end":34548,"line_start":876,"line_end":876,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashMap<K, V, S>>::remove","value":"fn <Q> (&mut self, k: &Q) -> Option<V>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the value at the key if the key\n was previously in the map.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":34521,"byte_end":34530,"line_start":875,"line_end":875,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":122},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":35455,"byte_end":35467,"line_start":907,"line_end":907,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<HashMap<K, V, S>>::remove_entry","value":"fn <Q> (&mut self, k: &Q) -> Option<(K, V)>","parent":null,"children":[],"decl_id":null,"docs":" Removes a key from the map, returning the stored key and value if the\n key was previously in the map.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":35434,"byte_end":35443,"line_start":906,"line_end":906,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":125},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":36309,"byte_end":36315,"line_start":936,"line_end":936,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashMap<K, V, S>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":131},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":38826,"byte_end":38839,"line_start":990,"line_end":990,"column_start":12,"column_end":25},"name":"raw_entry_mut","qualname":"<HashMap<K, V, S>>::raw_entry_mut","value":"fn (&mut self) -> RawEntryBuilderMut<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw entry builder for the HashMap.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":38805,"byte_end":38814,"line_start":989,"line_end":989,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":132},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":39642,"byte_end":39651,"line_start":1010,"line_end":1010,"column_start":12,"column_end":21},"name":"raw_entry","qualname":"<HashMap<K, V, S>>::raw_entry","value":"fn (&self) -> RawEntryBuilder<'_, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a raw immutable entry builder for the HashMap.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":39621,"byte_end":39630,"line_start":1009,"line_end":1009,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":161},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":41349,"byte_end":41353,"line_start":1087,"line_end":1087,"column_start":12,"column_end":16},"name":"Iter","qualname":"::map::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":165},{"krate":0,"index":166}],"decl_id":null,"docs":" An iterator over the entries of a `HashMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":175},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":42138,"byte_end":42145,"line_start":1116,"line_end":1116,"column_start":12,"column_end":19},"name":"IterMut","qualname":"::map::IterMut","value":"IterMut {  }","parent":null,"children":[{"krate":0,"index":179},{"krate":0,"index":180}],"decl_id":null,"docs":" A mutable iterator over the entries of a `HashMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":188},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":43120,"byte_end":43128,"line_start":1145,"line_end":1145,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::map::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":191}],"decl_id":null,"docs":" An owning iterator over the entries of a `HashMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":196},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":43688,"byte_end":43692,"line_start":1167,"line_end":1167,"column_start":12,"column_end":16},"name":"Keys","qualname":"::map::Keys","value":"Keys {  }","parent":null,"children":[{"krate":0,"index":200}],"decl_id":null,"docs":" An iterator over the keys of a `HashMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":209},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":44381,"byte_end":44387,"line_start":1194,"line_end":1194,"column_start":12,"column_end":18},"name":"Values","qualname":"::map::Values","value":"Values {  }","parent":null,"children":[{"krate":0,"index":213}],"decl_id":null,"docs":" An iterator over the values of a `HashMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":222},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":45088,"byte_end":45093,"line_start":1221,"line_end":1221,"column_start":12,"column_end":17},"name":"Drain","qualname":"::map::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":226}],"decl_id":null,"docs":" A draining iterator over the entries of a `HashMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":231},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":45686,"byte_end":45695,"line_start":1243,"line_end":1243,"column_start":12,"column_end":21},"name":"ValuesMut","qualname":"::map::ValuesMut","value":"ValuesMut {  }","parent":null,"children":[{"krate":0,"index":235}],"decl_id":null,"docs":" A mutable iterator over the values of a `HashMap`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":236},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":45982,"byte_end":46000,"line_start":1252,"line_end":1252,"column_start":12,"column_end":30},"name":"RawEntryBuilderMut","qualname":"::map::RawEntryBuilderMut","value":"RawEntryBuilderMut {  }","parent":null,"children":[{"krate":0,"index":241}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":247},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":46475,"byte_end":46483,"line_start":1267,"line_end":1267,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::RawEntryMut::Occupied","value":"RawEntryMut::Occupied(RawOccupiedEntryMut<'a, K, V>)","parent":{"krate":0,"index":242},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":250},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":46544,"byte_end":46550,"line_start":1269,"line_end":1269,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::RawEntryMut::Vacant","value":"RawEntryMut::Vacant(RawVacantEntryMut<'a, K, V, S>)","parent":{"krate":0,"index":242},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":242},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":46405,"byte_end":46416,"line_start":1265,"line_end":1265,"column_start":10,"column_end":21},"name":"RawEntryMut","qualname":"::map::RawEntryMut","value":"RawEntryMut::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":247},{"krate":0,"index":250}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":253},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":46739,"byte_end":46758,"line_start":1276,"line_end":1276,"column_start":12,"column_end":31},"name":"RawOccupiedEntryMut","qualname":"::map::RawOccupiedEntryMut","value":"RawOccupiedEntryMut {  }","parent":null,"children":[{"krate":0,"index":257},{"krate":0,"index":258}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":259},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":46986,"byte_end":47003,"line_start":1285,"line_end":1285,"column_start":12,"column_end":29},"name":"RawVacantEntryMut","qualname":"::map::RawVacantEntryMut","value":"RawVacantEntryMut {  }","parent":null,"children":[{"krate":0,"index":264},{"krate":0,"index":265}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RawEntryMut`] enum.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":266},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":47313,"byte_end":47328,"line_start":1295,"line_end":1295,"column_start":12,"column_end":27},"name":"RawEntryBuilder","qualname":"::map::RawEntryBuilder","value":"RawEntryBuilder {  }","parent":null,"children":[{"krate":0,"index":271}],"decl_id":null,"docs":" A builder for computing where in a [`HashMap`] a key-value pair would be stored.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":277},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":47577,"byte_end":47585,"line_start":1306,"line_end":1306,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilderMut>::from_key","value":"fn <Q> (self, k: &Q) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":47512,"byte_end":47521,"line_start":1304,"line_end":1304,"column_start":5,"column_end":14}},{"value":"allow(clippy::wrong_self_convention)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":47526,"byte_end":47565,"line_start":1305,"line_end":1305,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":279},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":47988,"byte_end":48011,"line_start":1319,"line_end":1319,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilderMut>::from_key_hashed_nocheck","value":"fn <Q> (self, hash: u64, k: &Q) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given key and its hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":47923,"byte_end":47932,"line_start":1317,"line_end":1317,"column_start":5,"column_end":14}},{"value":"allow(clippy::wrong_self_convention)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":47937,"byte_end":47976,"line_start":1318,"line_end":1318,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":287},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":48388,"byte_end":48397,"line_start":1335,"line_end":1335,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilderMut>::from_hash","value":"fn <F> (self, hash: u64, is_match: F) -> RawEntryMut<'a, K, V, S>","parent":null,"children":[],"decl_id":null,"docs":" Creates a `RawEntryMut` from the given hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":48323,"byte_end":48332,"line_start":1333,"line_end":1333,"column_start":5,"column_end":14}},{"value":"allow(clippy::wrong_self_convention)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":48337,"byte_end":48376,"line_start":1334,"line_end":1334,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":299},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":49294,"byte_end":49302,"line_start":1367,"line_end":1367,"column_start":12,"column_end":20},"name":"from_key","qualname":"<RawEntryBuilder>::from_key","value":"fn <Q> (self, k: &Q) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by key.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":49229,"byte_end":49238,"line_start":1365,"line_end":1365,"column_start":5,"column_end":14}},{"value":"allow(clippy::wrong_self_convention)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":49243,"byte_end":49282,"line_start":1366,"line_end":1366,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":301},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":49685,"byte_end":49708,"line_start":1380,"line_end":1380,"column_start":12,"column_end":35},"name":"from_key_hashed_nocheck","qualname":"<RawEntryBuilder>::from_key_hashed_nocheck","value":"fn <Q> (self, hash: u64, k: &Q) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by a key and its hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":49620,"byte_end":49629,"line_start":1378,"line_end":1378,"column_start":5,"column_end":14}},{"value":"allow(clippy::wrong_self_convention)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":49634,"byte_end":49673,"line_start":1379,"line_end":1379,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":308},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":50352,"byte_end":50361,"line_start":1405,"line_end":1405,"column_start":12,"column_end":21},"name":"from_hash","qualname":"<RawEntryBuilder>::from_hash","value":"fn <F> (self, hash: u64, is_match: F) -> Option<(&'a K, &'a V)>","parent":null,"children":[],"decl_id":null,"docs":" Access an entry by hash.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":50287,"byte_end":50296,"line_start":1403,"line_end":1403,"column_start":5,"column_end":14}},{"value":"allow(clippy::wrong_self_convention)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":50301,"byte_end":50340,"line_start":1404,"line_end":1404,"column_start":5,"column_end":44}}]},{"kind":"Method","id":{"krate":0,"index":315},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":51149,"byte_end":51158,"line_start":1431,"line_end":1431,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RawEntryMut>::or_insert","value":"fn (self, default_key: K, default_val: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":51128,"byte_end":51137,"line_start":1430,"line_end":1430,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":316},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":52027,"byte_end":52041,"line_start":1459,"line_end":1459,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RawEntryMut>::or_insert_with","value":"fn <F> (self, default: F) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns mutable references to the key and value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":52006,"byte_end":52015,"line_start":1458,"line_end":1458,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":318},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":53102,"byte_end":53112,"line_start":1497,"line_end":1497,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RawEntryMut>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":53081,"byte_end":53090,"line_start":1496,"line_end":1496,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":324},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":53653,"byte_end":53656,"line_start":1517,"line_end":1517,"column_start":12,"column_end":15},"name":"key","qualname":"<RawOccupiedEntryMut>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":53632,"byte_end":53641,"line_start":1516,"line_end":1516,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":325},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":53803,"byte_end":53810,"line_start":1523,"line_end":1523,"column_start":12,"column_end":19},"name":"key_mut","qualname":"<RawOccupiedEntryMut>::key_mut","value":"fn (&mut self) -> &mut K","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key in the entry.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":53782,"byte_end":53791,"line_start":1522,"line_end":1522,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":326},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":54036,"byte_end":54044,"line_start":1530,"line_end":1530,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RawOccupiedEntryMut>::into_key","value":"fn (self) -> &'a mut K","parent":null,"children":[],"decl_id":null,"docs":" Converts the entry into a mutable reference to the key in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":54015,"byte_end":54024,"line_start":1529,"line_end":1529,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":327},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":54195,"byte_end":54198,"line_start":1536,"line_end":1536,"column_start":12,"column_end":15},"name":"get","qualname":"<RawOccupiedEntryMut>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":54174,"byte_end":54183,"line_start":1535,"line_end":1535,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":328},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":54422,"byte_end":54430,"line_start":1543,"line_end":1543,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RawOccupiedEntryMut>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":54401,"byte_end":54410,"line_start":1542,"line_end":1542,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":329},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":54589,"byte_end":54596,"line_start":1549,"line_end":1549,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RawOccupiedEntryMut>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":54568,"byte_end":54577,"line_start":1548,"line_end":1548,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":330},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":54757,"byte_end":54770,"line_start":1555,"line_end":1555,"column_start":12,"column_end":25},"name":"get_key_value","qualname":"<RawOccupiedEntryMut>::get_key_value","value":"fn (&mut self) -> (&K, &V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":54736,"byte_end":54745,"line_start":1554,"line_end":1554,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":331},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":55008,"byte_end":55025,"line_start":1564,"line_end":1564,"column_start":12,"column_end":29},"name":"get_key_value_mut","qualname":"<RawOccupiedEntryMut>::get_key_value_mut","value":"fn (&mut self) -> (&mut K, &mut V)","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the key and value in the entry.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":54987,"byte_end":54996,"line_start":1563,"line_end":1563,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":332},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":55358,"byte_end":55372,"line_start":1574,"line_end":1574,"column_start":12,"column_end":26},"name":"into_key_value","qualname":"<RawOccupiedEntryMut>::into_key_value","value":"fn (self) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the key and value in the entry\n with a lifetime bound to the map itself.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":55337,"byte_end":55346,"line_start":1573,"line_end":1573,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":333},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":55635,"byte_end":55641,"line_start":1583,"line_end":1583,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawOccupiedEntryMut>::insert","value":"fn (&mut self, value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":55614,"byte_end":55623,"line_start":1582,"line_end":1582,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":334},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":55818,"byte_end":55828,"line_start":1589,"line_end":1589,"column_start":12,"column_end":22},"name":"insert_key","qualname":"<RawOccupiedEntryMut>::insert_key","value":"fn (&mut self, key: K) -> K","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":55797,"byte_end":55806,"line_start":1588,"line_end":1588,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":335},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":55987,"byte_end":55993,"line_start":1595,"line_end":1595,"column_start":12,"column_end":18},"name":"remove","qualname":"<RawOccupiedEntryMut>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":55966,"byte_end":55975,"line_start":1594,"line_end":1594,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":336},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":56131,"byte_end":56143,"line_start":1601,"line_end":1601,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RawOccupiedEntryMut>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":56110,"byte_end":56119,"line_start":1600,"line_end":1600,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":342},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":56464,"byte_end":56470,"line_start":1613,"line_end":1613,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawVacantEntryMut>::insert","value":"fn (self, key: K, value: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":56443,"byte_end":56452,"line_start":1612,"line_end":1612,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":343},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":56914,"byte_end":56935,"line_start":1627,"line_end":1627,"column_start":12,"column_end":33},"name":"insert_hashed_nocheck","qualname":"<RawVacantEntryMut>::insert_hashed_nocheck","value":"fn (self, hash: u64, key: K, value: V) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":56854,"byte_end":56863,"line_start":1625,"line_end":1625,"column_start":5,"column_end":14}},{"value":"allow(clippy::shadow_unrelated)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":56868,"byte_end":56902,"line_start":1626,"line_end":1626,"column_start":5,"column_end":39}}]},{"kind":"Method","id":{"krate":0,"index":345},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":57279,"byte_end":57297,"line_start":1638,"line_end":1638,"column_start":12,"column_end":30},"name":"insert_with_hasher","qualname":"<RawVacantEntryMut>::insert_with_hasher","value":"fn <H> (self, hash: u64, key: K, value: V, hasher: H) -> (&'a mut K, &'a mut V)","parent":null,"children":[],"decl_id":null,"docs":" Set the value of an entry with a custom hasher function.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":57258,"byte_end":57267,"line_start":1637,"line_end":1637,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":377},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":59173,"byte_end":59181,"line_start":1701,"line_end":1701,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::map::Entry::Occupied","value":"Entry::Occupied(OccupiedEntry<'a, K, V, S>)","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":380},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":59240,"byte_end":59246,"line_start":1704,"line_end":1704,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::map::Entry::Vacant","value":"Entry::Vacant(VacantEntry<'a, K, V, S>)","parent":{"krate":0,"index":372},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":372},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":59109,"byte_end":59114,"line_start":1699,"line_end":1699,"column_start":10,"column_end":15},"name":"Entry","qualname":"::map::Entry","value":"Entry::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":377},{"krate":0,"index":380}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":388},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":59732,"byte_end":59745,"line_start":1720,"line_end":1720,"column_start":12,"column_end":25},"name":"OccupiedEntry","qualname":"::map::OccupiedEntry","value":"OccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":393},{"krate":0,"index":394},{"krate":0,"index":395}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":409},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":60470,"byte_end":60481,"line_start":1754,"line_end":1754,"column_start":12,"column_end":23},"name":"VacantEntry","qualname":"::map::VacantEntry","value":"VacantEntry {  }","parent":null,"children":[{"krate":0,"index":414},{"krate":0,"index":415},{"krate":0,"index":416}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`Entry`] enum.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":568},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":66713,"byte_end":66722,"line_start":2016,"line_end":2016,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<Entry>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":66692,"byte_end":66701,"line_start":2015,"line_end":2015,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":569},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":67477,"byte_end":67491,"line_start":2043,"line_end":2043,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<Entry>::or_insert_with","value":"fn <F> (self, default: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":67456,"byte_end":67465,"line_start":2042,"line_end":2042,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":571},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":68048,"byte_end":68051,"line_start":2065,"line_end":2065,"column_start":12,"column_end":15},"name":"key","qualname":"<Entry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":68027,"byte_end":68036,"line_start":2064,"line_end":2064,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":572},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":68805,"byte_end":68815,"line_start":2093,"line_end":2093,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<Entry>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":68784,"byte_end":68793,"line_start":2092,"line_end":2092,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":579},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":69630,"byte_end":69640,"line_start":2124,"line_end":2124,"column_start":12,"column_end":22},"name":"or_default","qualname":"<Entry>::or_default","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":69609,"byte_end":69618,"line_start":2123,"line_end":2123,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":585},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":70272,"byte_end":70275,"line_start":2149,"line_end":2149,"column_start":12,"column_end":15},"name":"key","qualname":"<OccupiedEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":70251,"byte_end":70260,"line_start":2148,"line_end":2148,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":586},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":70893,"byte_end":70905,"line_start":2172,"line_end":2172,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<OccupiedEntry>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":70872,"byte_end":70881,"line_start":2171,"line_end":2171,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":587},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":71480,"byte_end":71483,"line_start":2195,"line_end":2195,"column_start":12,"column_end":15},"name":"get","qualname":"<OccupiedEntry>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":71459,"byte_end":71468,"line_start":2194,"line_end":2194,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":588},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":72408,"byte_end":72415,"line_start":2227,"line_end":2227,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<OccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":72387,"byte_end":72396,"line_start":2226,"line_end":2226,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":589},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":73232,"byte_end":73240,"line_start":2255,"line_end":2255,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<OccupiedEntry>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the OccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":73211,"byte_end":73220,"line_start":2254,"line_end":2254,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":590},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":73829,"byte_end":73835,"line_start":2277,"line_end":2277,"column_start":12,"column_end":18},"name":"insert","qualname":"<OccupiedEntry>::insert","value":"fn (&mut self, mut value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":73808,"byte_end":73817,"line_start":2276,"line_end":2276,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":591},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":74482,"byte_end":74488,"line_start":2301,"line_end":2301,"column_start":12,"column_end":18},"name":"remove","qualname":"<OccupiedEntry>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":74461,"byte_end":74470,"line_start":2300,"line_end":2300,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":592},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":75273,"byte_end":75286,"line_start":2326,"line_end":2326,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<OccupiedEntry>::replace_entry","value":"fn (self, value: V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":75252,"byte_end":75261,"line_start":2325,"line_end":2325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":593},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":76412,"byte_end":76423,"line_start":2360,"line_end":2360,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<OccupiedEntry>::replace_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":76391,"byte_end":76400,"line_start":2359,"line_end":2359,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":599},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":76955,"byte_end":76958,"line_start":2379,"line_end":2379,"column_start":12,"column_end":15},"name":"key","qualname":"<VacantEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `VacantEntry`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":76934,"byte_end":76943,"line_start":2378,"line_end":2378,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":600},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":77359,"byte_end":77367,"line_start":2398,"line_end":2398,"column_start":12,"column_end":20},"name":"into_key","qualname":"<VacantEntry>::into_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":77338,"byte_end":77347,"line_start":2397,"line_end":2397,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":601},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":77883,"byte_end":77889,"line_start":2419,"line_end":2419,"column_start":12,"column_end":18},"name":"insert","qualname":"<VacantEntry>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the VacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":77862,"byte_end":77871,"line_start":2418,"line_end":2418,"column_start":5,"column_end":14}}]},{"kind":"Type","id":{"krate":0,"index":1384},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5317438,"byte_end":5317449,"line_start":10,"line_end":10,"column_start":10,"column_end":21},"name":"BitMaskWord","qualname":"::raw::imp::BitMaskWord","value":"u16","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1385},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5317467,"byte_end":5317481,"line_start":11,"line_end":11,"column_start":11,"column_end":25},"name":"BITMASK_STRIDE","qualname":"::raw::imp::BITMASK_STRIDE","value":"usize","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Const","id":{"krate":0,"index":1386},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5317504,"byte_end":5317516,"line_start":12,"line_end":12,"column_start":11,"column_end":23},"name":"BITMASK_MASK","qualname":"::raw::imp::BITMASK_MASK","value":"BitMaskWord","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1404},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5317713,"byte_end":5317718,"line_start":19,"line_end":19,"column_start":12,"column_end":17},"name":"Group","qualname":"::raw::imp::Group","value":"","parent":null,"children":[],"decl_id":null,"docs":" Abstraction over a group of control bytes which can be scanned in\n parallel.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5317702,"byte_end":5317733,"line_start":19,"line_end":19,"column_start":1,"column_end":32}}]},{"kind":"Const","id":{"krate":0,"index":1388},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5317891,"byte_end":5317896,"line_start":25,"line_end":25,"column_start":15,"column_end":20},"name":"WIDTH","qualname":"::raw::imp::Group::WIDTH","value":"usize","parent":{"krate":0,"index":1387},"children":[],"decl_id":null,"docs":" Number of bytes in the group.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1389},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5318140,"byte_end":5318152,"line_start":32,"line_end":32,"column_start":12,"column_end":24},"name":"static_empty","qualname":"<Group>::static_empty","value":"fn () -> &'static [u8]","parent":null,"children":[],"decl_id":null,"docs":" Returns a full group of empty bytes, suitable for use as the initial\n value for an empty hash table.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5318119,"byte_end":5318128,"line_start":31,"line_end":31,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1396},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5318592,"byte_end":5318596,"line_start":46,"line_end":46,"column_start":19,"column_end":23},"name":"load","qualname":"<Group>::load","value":"fn (ptr: *const u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Loads a group of bytes starting at the given address.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5318505,"byte_end":5318514,"line_start":44,"line_end":44,"column_start":5,"column_end":14}},{"value":"allow(clippy::cast_ptr_alignment)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5318519,"byte_end":5318555,"line_start":45,"line_end":45,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1397},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5318879,"byte_end":5318891,"line_start":54,"line_end":54,"column_start":19,"column_end":31},"name":"load_aligned","qualname":"<Group>::load_aligned","value":"fn (ptr: *const u8) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Loads a group of bytes starting at the given address, which must be\n aligned to `mem::align_of::<Group>()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5318810,"byte_end":5318819,"line_start":52,"line_end":52,"column_start":5,"column_end":14}},{"value":"allow(clippy::cast_ptr_alignment)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5318824,"byte_end":5318860,"line_start":53,"line_end":53,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1398},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5319296,"byte_end":5319309,"line_start":64,"line_end":64,"column_start":19,"column_end":32},"name":"store_aligned","qualname":"<Group>::store_aligned","value":"fn (self, ptr: *mut u8) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Stores the group of bytes to the given address, which must be\n aligned to `mem::align_of::<Group>()`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5319227,"byte_end":5319236,"line_start":62,"line_end":62,"column_start":5,"column_end":14}},{"value":"allow(clippy::cast_ptr_alignment)","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5319241,"byte_end":5319277,"line_start":63,"line_end":63,"column_start":5,"column_end":41}}]},{"kind":"Method","id":{"krate":0,"index":1399},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5319644,"byte_end":5319654,"line_start":73,"line_end":73,"column_start":12,"column_end":22},"name":"match_byte","qualname":"<Group>::match_byte","value":"fn (self, byte: u8) -> BitMask","parent":null,"children":[],"decl_id":null,"docs":" Returns a `BitMask` indicating all bytes in the group which have\n the given value.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5319623,"byte_end":5319632,"line_start":72,"line_end":72,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1400},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5320301,"byte_end":5320312,"line_start":91,"line_end":91,"column_start":12,"column_end":23},"name":"match_empty","qualname":"<Group>::match_empty","value":"fn (self) -> BitMask","parent":null,"children":[],"decl_id":null,"docs":" Returns a `BitMask` indicating all bytes in the group which are\n `EMPTY`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5320280,"byte_end":5320289,"line_start":90,"line_end":90,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1401},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5320497,"byte_end":5320519,"line_start":98,"line_end":98,"column_start":12,"column_end":34},"name":"match_empty_or_deleted","qualname":"<Group>::match_empty_or_deleted","value":"fn (self) -> BitMask","parent":null,"children":[],"decl_id":null,"docs":" Returns a `BitMask` indicating all bytes in the group which are\n `EMPTY` or `DELETED`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5320476,"byte_end":5320485,"line_start":97,"line_end":97,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1402},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5321073,"byte_end":5321083,"line_start":114,"line_end":114,"column_start":12,"column_end":22},"name":"match_full","qualname":"<Group>::match_full","value":"fn (&self) -> BitMask","parent":null,"children":[],"decl_id":null,"docs":" Returns a `BitMask` indicating all bytes in the group which are full.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5321052,"byte_end":5321061,"line_start":113,"line_end":113,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1403},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5321340,"byte_end":5321384,"line_start":123,"line_end":123,"column_start":12,"column_end":56},"name":"convert_special_to_empty_and_full_to_deleted","qualname":"<Group>::convert_special_to_empty_and_full_to_deleted","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Performs the following transformation on all bytes in the group:\n - `EMPTY => EMPTY`\n - `DELETED => EMPTY`\n - `FULL => DELETED`\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5321319,"byte_end":5321328,"line_start":122,"line_end":122,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1410},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158020,"byte_end":158027,"line_start":17,"line_end":17,"column_start":12,"column_end":19},"name":"BitMask","qualname":"::raw::bitmask::BitMask","value":"","parent":null,"children":[],"decl_id":null,"docs":" A bit mask which contains the result of a `Match` operation on a `Group` and\n allows iterating through them.","sig":null,"attributes":[{"value":"rustc_copy_clone_marker","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158009,"byte_end":158045,"line_start":17,"line_end":17,"column_start":1,"column_end":37}}]},{"kind":"Method","id":{"krate":0,"index":675},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158186,"byte_end":158192,"line_start":24,"line_end":24,"column_start":12,"column_end":18},"name":"invert","qualname":"<BitMask>::invert","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `BitMask` with all bits inverted.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158149,"byte_end":158158,"line_start":22,"line_end":22,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158163,"byte_end":158174,"line_start":23,"line_end":23,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":676},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158357,"byte_end":158374,"line_start":31,"line_end":31,"column_start":12,"column_end":29},"name":"remove_lowest_bit","qualname":"<BitMask>::remove_lowest_bit","value":"fn (self) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Returns a new `BitMask` with the lowest bit removed.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158320,"byte_end":158329,"line_start":29,"line_end":29,"column_start":5,"column_end":14}},{"value":"must_use","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158334,"byte_end":158345,"line_start":30,"line_end":30,"column_start":5,"column_end":16}}]},{"kind":"Method","id":{"krate":0,"index":677},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158525,"byte_end":158536,"line_start":36,"line_end":36,"column_start":12,"column_end":23},"name":"any_bit_set","qualname":"<BitMask>::any_bit_set","value":"fn (self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns whether the `BitMask` has at least one set bit.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158504,"byte_end":158513,"line_start":35,"line_end":35,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":678},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158674,"byte_end":158688,"line_start":42,"line_end":42,"column_start":12,"column_end":26},"name":"lowest_set_bit","qualname":"<BitMask>::lowest_set_bit","value":"fn (self) -> Option<usize>","parent":null,"children":[],"decl_id":null,"docs":" Returns the first set bit in the `BitMask`, if there is one.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158653,"byte_end":158662,"line_start":41,"line_end":41,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":679},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":159021,"byte_end":159043,"line_start":54,"line_end":54,"column_start":19,"column_end":41},"name":"lowest_set_bit_nonzero","qualname":"<BitMask>::lowest_set_bit_nonzero","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the first set bit in the `BitMask`, if there is one. The\n bitmask must not be empty.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158961,"byte_end":158970,"line_start":52,"line_end":52,"column_start":5,"column_end":14}},{"value":"cfg(feature = \"nightly\")","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158975,"byte_end":159002,"line_start":53,"line_end":53,"column_start":5,"column_end":32}}]},{"kind":"Method","id":{"krate":0,"index":680},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":159369,"byte_end":159383,"line_start":65,"line_end":65,"column_start":12,"column_end":26},"name":"trailing_zeros","qualname":"<BitMask>::trailing_zeros","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of trailing zeroes in the `BitMask`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":159348,"byte_end":159357,"line_start":64,"line_end":64,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":681},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":160080,"byte_end":160093,"line_start":80,"line_end":80,"column_start":12,"column_end":25},"name":"leading_zeros","qualname":"<BitMask>::leading_zeros","value":"fn (self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of leading zeroes in the `BitMask`.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":160059,"byte_end":160068,"line_start":79,"line_end":79,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":686},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":160453,"byte_end":160464,"line_start":97,"line_end":97,"column_start":12,"column_end":23},"name":"BitMaskIter","qualname":"::raw::bitmask::BitMaskIter","value":"","parent":null,"children":[],"decl_id":null,"docs":" Iterator over the contents of a `BitMask`, returning the indicies of set\n bits.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":720},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":118419,"byte_end":118425,"line_start":258,"line_end":258,"column_start":12,"column_end":18},"name":"Bucket","qualname":"::raw::Bucket","value":"Bucket {  }","parent":null,"children":[{"krate":0,"index":722}],"decl_id":null,"docs":" A reference to a hash table bucket containing a `T`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":731},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119045,"byte_end":119051,"line_start":285,"line_end":285,"column_start":19,"column_end":25},"name":"as_ptr","qualname":"<Bucket<T>>::as_ptr","value":"fn (&self) -> *mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119017,"byte_end":119026,"line_start":284,"line_end":284,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":733},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119579,"byte_end":119583,"line_start":303,"line_end":303,"column_start":19,"column_end":23},"name":"drop","qualname":"<Bucket<T>>::drop","value":"fn (&self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119551,"byte_end":119560,"line_start":302,"line_end":302,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":734},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119670,"byte_end":119674,"line_start":307,"line_end":307,"column_start":19,"column_end":23},"name":"read","qualname":"<Bucket<T>>::read","value":"fn (&self) -> T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119642,"byte_end":119651,"line_start":306,"line_end":306,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":735},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119756,"byte_end":119761,"line_start":311,"line_end":311,"column_start":19,"column_end":24},"name":"write","qualname":"<Bucket<T>>::write","value":"fn (&self, val: T) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119728,"byte_end":119737,"line_start":310,"line_end":310,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":736},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119851,"byte_end":119857,"line_start":315,"line_end":315,"column_start":19,"column_end":25},"name":"as_ref","qualname":"<Bucket<T>>::as_ref","value":"fn <'a> (&self) -> &'a T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119823,"byte_end":119832,"line_start":314,"line_end":314,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":738},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119942,"byte_end":119948,"line_start":319,"line_end":319,"column_start":19,"column_end":25},"name":"as_mut","qualname":"<Bucket<T>>::as_mut","value":"fn <'a> (&self) -> &'a mut T","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":119914,"byte_end":119923,"line_start":318,"line_end":318,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":740},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":120041,"byte_end":120065,"line_start":323,"line_end":323,"column_start":19,"column_end":43},"name":"copy_from_nonoverlapping","qualname":"<Bucket<T>>::copy_from_nonoverlapping","value":"fn (&self, other: &Self) -> ()","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":120013,"byte_end":120022,"line_start":322,"line_end":322,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":741},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":120217,"byte_end":120225,"line_start":329,"line_end":329,"column_start":12,"column_end":20},"name":"RawTable","qualname":"::raw::RawTable","value":"RawTable {  }","parent":null,"children":[{"krate":0,"index":743},{"krate":0,"index":744},{"krate":0,"index":745},{"krate":0,"index":746},{"krate":0,"index":747},{"krate":0,"index":748}],"decl_id":null,"docs":" A raw hash table with an unsafe API.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":751},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":121133,"byte_end":121136,"line_start":357,"line_end":357,"column_start":12,"column_end":15},"name":"new","qualname":"<RawTable<T>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash table without allocating any memory.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":121112,"byte_end":121121,"line_start":356,"line_end":356,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":757},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":123168,"byte_end":123181,"line_start":413,"line_end":413,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<RawTable<T>>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Allocates a new hash table with at least enough capacity for inserting\n the given number of elements without reallocating.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":763},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":124240,"byte_end":124246,"line_start":445,"line_end":445,"column_start":19,"column_end":25},"name":"bucket","qualname":"<RawTable<T>>::bucket","value":"fn (&self, index: usize) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a pointer to an element in the table.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":124212,"byte_end":124221,"line_start":444,"line_end":444,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":764},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":124537,"byte_end":124550,"line_start":453,"line_end":453,"column_start":19,"column_end":32},"name":"erase_no_drop","qualname":"<RawTable<T>>::erase_no_drop","value":"fn (&mut self, item: &Bucket<T>) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Erases an element from the table without dropping it.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":124509,"byte_end":124518,"line_start":452,"line_end":452,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":768},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":129283,"byte_end":129296,"line_start":559,"line_end":559,"column_start":12,"column_end":25},"name":"clear_no_drop","qualname":"<RawTable<T>>::clear_no_drop","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Marks all table buckets as empty without dropping their contents.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":129262,"byte_end":129271,"line_start":558,"line_end":558,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":769},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":129673,"byte_end":129678,"line_start":571,"line_end":571,"column_start":12,"column_end":17},"name":"clear","qualname":"<RawTable<T>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Removes all elements from the table without freeing the backing memory.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":129652,"byte_end":129661,"line_start":570,"line_end":570,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":771},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":130108,"byte_end":130117,"line_start":586,"line_end":586,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<RawTable<T>>::shrink_to","value":"fn (&mut self, min_size: usize, hasher: impl Fn(&T) -> u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the table to fit `max(self.len(), min_size)` elements.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":130087,"byte_end":130096,"line_start":585,"line_end":585,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":774},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":131396,"byte_end":131403,"line_start":619,"line_end":619,"column_start":12,"column_end":19},"name":"reserve","qualname":"<RawTable<T>>::reserve","value":"fn (&mut self, additional: usize, hasher: impl Fn(&T) -> u64) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Ensures that at least `additional` items can be inserted into the table\n without reallocation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":131375,"byte_end":131384,"line_start":618,"line_end":618,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":777},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":131823,"byte_end":131834,"line_start":629,"line_end":629,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<RawTable<T>>::try_reserve","value":"fn (&mut self, additional: usize, hasher: impl Fn(&T) -> u64) -> Result<(), CollectionAllocErr>","parent":null,"children":[],"decl_id":null,"docs":" Tries to ensure that at least `additional` items can be inserted into\n the table without reallocation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":131802,"byte_end":131811,"line_start":628,"line_end":628,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":789},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":139839,"byte_end":139845,"line_start":820,"line_end":820,"column_start":12,"column_end":18},"name":"insert","qualname":"<RawTable<T>>::insert","value":"fn (&mut self, hash: u64, value: T, hasher: impl Fn(&T) -> u64) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":139818,"byte_end":139827,"line_start":819,"line_end":819,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":791},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":140269,"byte_end":140283,"line_start":831,"line_end":831,"column_start":12,"column_end":26},"name":"insert_no_grow","qualname":"<RawTable<T>>::insert_no_grow","value":"fn (&mut self, hash: u64, value: T) -> Bucket<T>","parent":null,"children":[],"decl_id":null,"docs":" Inserts a new element into the table, without growing the table.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":140248,"byte_end":140257,"line_start":830,"line_end":830,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":792},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":140889,"byte_end":140893,"line_start":850,"line_end":850,"column_start":12,"column_end":16},"name":"find","qualname":"<RawTable<T>>::find","value":"fn (&self, hash: u64, mut eq: impl FnMut(&T) -> bool) -> Option<Bucket<T>>","parent":null,"children":[],"decl_id":null,"docs":" Searches for an element in the table.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":140868,"byte_end":140877,"line_start":849,"line_end":849,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":794},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":141856,"byte_end":141864,"line_start":876,"line_end":876,"column_start":12,"column_end":20},"name":"capacity","qualname":"<RawTable<T>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the map can hold without reallocating.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":141835,"byte_end":141844,"line_start":875,"line_end":875,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":795},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":142006,"byte_end":142009,"line_start":882,"line_end":882,"column_start":12,"column_end":15},"name":"len","qualname":"<RawTable<T>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the table.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":141985,"byte_end":141994,"line_start":881,"line_end":881,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":796},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":142131,"byte_end":142138,"line_start":888,"line_end":888,"column_start":12,"column_end":19},"name":"buckets","qualname":"<RawTable<T>>::buckets","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of buckets in the table.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":142110,"byte_end":142119,"line_start":887,"line_end":887,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":799},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":142854,"byte_end":142858,"line_start":910,"line_end":910,"column_start":19,"column_end":23},"name":"iter","qualname":"<RawTable<T>>::iter","value":"fn (&self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator over every element in the table. It is up to\n the caller to ensure that the `RawTable` outlives the `RawIter`.\n Because we cannot make the `next` method unsafe on the `RawIter`\n struct, we have to make the `iter` method unsafe.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":142826,"byte_end":142835,"line_start":909,"line_end":909,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":800},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":143436,"byte_end":143441,"line_start":923,"line_end":923,"column_start":19,"column_end":24},"name":"drain","qualname":"<RawTable<T>>::drain","value":"fn (&mut self) -> RawDrain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Returns an iterator which removes all elements from the table without\n freeing the memory. It is up to the caller to ensure that the `RawTable`\n outlives the `RawDrain`. Because we cannot make the `next` method unsafe\n on the `RawDrain`, we have to make the `drain` method unsafe.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":143408,"byte_end":143417,"line_start":922,"line_end":922,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":801},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":143866,"byte_end":143876,"line_start":935,"line_end":935,"column_start":12,"column_end":22},"name":"into_alloc","qualname":"<RawTable<T>>::into_alloc","value":"fn (self) -> Option<(NonNull<u8>, Layout)>","parent":null,"children":[],"decl_id":null,"docs":" Converts the table into a raw allocation. The contents of the table\n should be dropped using a `RawIter` before freeing the allocation.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":143845,"byte_end":143854,"line_start":934,"line_end":934,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":820},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":147716,"byte_end":147728,"line_start":1056,"line_end":1056,"column_start":12,"column_end":24},"name":"RawIterRange","qualname":"::raw::RawIterRange","value":"RawIterRange {  }","parent":null,"children":[{"krate":0,"index":822},{"krate":0,"index":823},{"krate":0,"index":824},{"krate":0,"index":825}],"decl_id":null,"docs":" Iterator over a sub-range of a table. Unlike `RawIter` this iterator does\n not track an item count.\n","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":843},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":152715,"byte_end":152722,"line_start":1194,"line_end":1194,"column_start":12,"column_end":19},"name":"RawIter","qualname":"::raw::RawIter","value":"RawIter { iter }","parent":null,"children":[{"krate":0,"index":845},{"krate":0,"index":846}],"decl_id":null,"docs":" Iterator which returns a raw pointer to every full bucket in the table.\n","sig":null,"attributes":[]},{"kind":"Field","id":{"krate":0,"index":845},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":152736,"byte_end":152740,"line_start":1195,"line_end":1195,"column_start":9,"column_end":13},"name":"iter","qualname":"::raw::RawIter::iter","value":"raw::RawIterRange<T>","parent":{"krate":0,"index":843},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":859},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":153724,"byte_end":153735,"line_start":1236,"line_end":1236,"column_start":12,"column_end":23},"name":"RawIntoIter","qualname":"::raw::RawIntoIter","value":"RawIntoIter {  }","parent":null,"children":[{"krate":0,"index":861},{"krate":0,"index":862},{"krate":0,"index":863}],"decl_id":null,"docs":" Iterator which consumes a table and returns elements.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":866},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":153886,"byte_end":153890,"line_start":1244,"line_end":1244,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawIntoIter<T>>::iter","value":"fn (&self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":153865,"byte_end":153874,"line_start":1243,"line_end":1243,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":883},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":155513,"byte_end":155521,"line_start":1309,"line_end":1309,"column_start":12,"column_end":20},"name":"RawDrain","qualname":"::raw::RawDrain","value":"RawDrain {  }","parent":null,"children":[{"krate":0,"index":886},{"krate":0,"index":887},{"krate":0,"index":888},{"krate":0,"index":889}],"decl_id":null,"docs":" Iterator which consumes elements without freeing the table storage.\n","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":892},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":156005,"byte_end":156009,"line_start":1325,"line_end":1325,"column_start":12,"column_end":16},"name":"iter","qualname":"<RawDrain>::iter","value":"fn (&self) -> RawIter<T>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":155984,"byte_end":155993,"line_start":1324,"line_end":1324,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":932},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":161580,"byte_end":161591,"line_start":33,"line_end":33,"column_start":12,"column_end":23},"name":"rustc_entry","qualname":"<HashMap<K, V, S>>::rustc_entry","value":"fn (&mut self, key: K) -> RustcEntry<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Gets the given key's corresponding entry in the map for in-place manipulation.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":161559,"byte_end":161568,"line_start":32,"line_end":32,"column_start":5,"column_end":14}}]},{"kind":"TupleVariant","id":{"krate":0,"index":938},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":162664,"byte_end":162672,"line_start":64,"line_end":64,"column_start":5,"column_end":13},"name":"Occupied","qualname":"::rustc_entry::RustcEntry::Occupied","value":"RustcEntry::Occupied(RustcOccupiedEntry<'a, K, V>)","parent":{"krate":0,"index":934},"children":[],"decl_id":null,"docs":" An occupied entry.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":941},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":162733,"byte_end":162739,"line_start":67,"line_end":67,"column_start":5,"column_end":11},"name":"Vacant","qualname":"::rustc_entry::RustcEntry::Vacant","value":"RustcEntry::Vacant(RustcVacantEntry<'a, K, V>)","parent":{"krate":0,"index":934},"children":[],"decl_id":null,"docs":" A vacant entry.\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":934},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":162602,"byte_end":162612,"line_start":62,"line_end":62,"column_start":10,"column_end":20},"name":"RustcEntry","qualname":"::rustc_entry::RustcEntry","value":"RustcEntry::{Occupied, Vacant}","parent":null,"children":[{"krate":0,"index":938},{"krate":0,"index":941}],"decl_id":null,"docs":" A view into a single entry in a map, which may either be vacant or occupied.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":948},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":163227,"byte_end":163245,"line_start":83,"line_end":83,"column_start":12,"column_end":30},"name":"RustcOccupiedEntry","qualname":"::rustc_entry::RustcOccupiedEntry","value":"RustcOccupiedEntry {  }","parent":null,"children":[{"krate":0,"index":952},{"krate":0,"index":953},{"krate":0,"index":954}],"decl_id":null,"docs":" A view into an occupied entry in a `HashMap`.\n It is part of the [`RustcEntry`] enum.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":965},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":163953,"byte_end":163969,"line_start":115,"line_end":115,"column_start":12,"column_end":28},"name":"RustcVacantEntry","qualname":"::rustc_entry::RustcVacantEntry","value":"RustcVacantEntry {  }","parent":null,"children":[{"krate":0,"index":969},{"krate":0,"index":970},{"krate":0,"index":971}],"decl_id":null,"docs":" A view into a vacant entry in a `HashMap`.\n It is part of the [`RustcEntry`] enum.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":980},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":164811,"byte_end":164820,"line_start":145,"line_end":145,"column_start":12,"column_end":21},"name":"or_insert","qualname":"<RustcEntry>::or_insert","value":"fn (self, default: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default if empty, and returns\n a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":164790,"byte_end":164799,"line_start":144,"line_end":144,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":981},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":165543,"byte_end":165557,"line_start":171,"line_end":171,"column_start":12,"column_end":26},"name":"or_insert_with","qualname":"<RustcEntry>::or_insert_with","value":"fn <F> (self, default: F) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the result of the default function if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":165522,"byte_end":165531,"line_start":170,"line_end":170,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":983},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":166082,"byte_end":166085,"line_start":192,"line_end":192,"column_start":12,"column_end":15},"name":"key","qualname":"<RustcEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to this entry's key.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":166061,"byte_end":166070,"line_start":191,"line_end":191,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":984},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":166837,"byte_end":166847,"line_start":220,"line_end":220,"column_start":12,"column_end":22},"name":"and_modify","qualname":"<RustcEntry>::and_modify","value":"fn <F> (self, f: F) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Provides in-place mutable access to an occupied entry before any\n potential inserts into the map.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":166816,"byte_end":166825,"line_start":219,"line_end":219,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":990},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":167639,"byte_end":167649,"line_start":251,"line_end":251,"column_start":12,"column_end":22},"name":"or_default","qualname":"<RustcEntry>::or_default","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Ensures a value is in the entry by inserting the default value if empty,\n and returns a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":167618,"byte_end":167627,"line_start":250,"line_end":250,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":995},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":168254,"byte_end":168257,"line_start":275,"line_end":275,"column_start":12,"column_end":15},"name":"key","qualname":"<RustcOccupiedEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":168233,"byte_end":168242,"line_start":274,"line_end":274,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":996},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":168897,"byte_end":168909,"line_start":298,"line_end":298,"column_start":12,"column_end":24},"name":"remove_entry","qualname":"<RustcOccupiedEntry>::remove_entry","value":"fn (self) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Take the ownership of the key and value from the map.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":168876,"byte_end":168885,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":997},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":169500,"byte_end":169503,"line_start":321,"line_end":321,"column_start":12,"column_end":15},"name":"get","qualname":"<RustcOccupiedEntry>::get","value":"fn (&self) -> &V","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":169479,"byte_end":169488,"line_start":320,"line_end":320,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":998},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":170465,"byte_end":170472,"line_start":353,"line_end":353,"column_start":12,"column_end":19},"name":"get_mut","qualname":"<RustcOccupiedEntry>::get_mut","value":"fn (&mut self) -> &mut V","parent":null,"children":[],"decl_id":null,"docs":" Gets a mutable reference to the value in the entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":170444,"byte_end":170453,"line_start":352,"line_end":352,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":999},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":171321,"byte_end":171329,"line_start":381,"line_end":381,"column_start":12,"column_end":20},"name":"into_mut","qualname":"<RustcOccupiedEntry>::into_mut","value":"fn (self) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Converts the RustcOccupiedEntry into a mutable reference to the value in the entry\n with a lifetime bound to the map itself.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":171300,"byte_end":171309,"line_start":380,"line_end":380,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1000},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":171940,"byte_end":171946,"line_start":403,"line_end":403,"column_start":12,"column_end":18},"name":"insert","qualname":"<RustcOccupiedEntry>::insert","value":"fn (&mut self, mut value: V) -> V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry, and returns the entry's old value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":171919,"byte_end":171928,"line_start":402,"line_end":402,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1001},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":172615,"byte_end":172621,"line_start":427,"line_end":427,"column_start":12,"column_end":18},"name":"remove","qualname":"<RustcOccupiedEntry>::remove","value":"fn (self) -> V","parent":null,"children":[],"decl_id":null,"docs":" Takes the value out of the entry, and returns it.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":172594,"byte_end":172603,"line_start":426,"line_end":426,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1002},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":173422,"byte_end":173435,"line_start":452,"line_end":452,"column_start":12,"column_end":25},"name":"replace_entry","qualname":"<RustcOccupiedEntry>::replace_entry","value":"fn (self, value: V) -> (K, V)","parent":null,"children":[],"decl_id":null,"docs":" Replaces the entry, returning the old key and value. The new key in the hash map will be\n the key used to create this entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":173401,"byte_end":173410,"line_start":451,"line_end":451,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1003},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":174577,"byte_end":174588,"line_start":486,"line_end":486,"column_start":12,"column_end":23},"name":"replace_key","qualname":"<RustcOccupiedEntry>::replace_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Replaces the key in the hash map with the key used to create this entry.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":174556,"byte_end":174565,"line_start":485,"line_end":485,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1008},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":175130,"byte_end":175133,"line_start":505,"line_end":505,"column_start":12,"column_end":15},"name":"key","qualname":"<RustcVacantEntry>::key","value":"fn (&self) -> &K","parent":null,"children":[],"decl_id":null,"docs":" Gets a reference to the key that would be used when inserting a value\n through the `RustcVacantEntry`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":175109,"byte_end":175118,"line_start":504,"line_end":504,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1009},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":175550,"byte_end":175558,"line_start":524,"line_end":524,"column_start":12,"column_end":20},"name":"into_key","qualname":"<RustcVacantEntry>::into_key","value":"fn (self) -> K","parent":null,"children":[],"decl_id":null,"docs":" Take ownership of the key.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":175529,"byte_end":175538,"line_start":523,"line_end":523,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1010},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176095,"byte_end":176101,"line_start":545,"line_end":545,"column_start":12,"column_end":18},"name":"insert","qualname":"<RustcVacantEntry>::insert","value":"fn (self, value: V) -> &'a mut V","parent":null,"children":[],"decl_id":null,"docs":" Sets the value of the entry with the RustcVacantEntry's key,\n and returns a mutable reference to it.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176074,"byte_end":176083,"line_start":544,"line_end":544,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1014},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176385,"byte_end":176395,"line_start":554,"line_end":554,"column_start":12,"column_end":22},"name":"rustc_iter","qualname":"<IterMut>::rustc_iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a iterator of references over the remaining items.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176364,"byte_end":176373,"line_start":553,"line_end":553,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1018},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176572,"byte_end":176582,"line_start":562,"line_end":562,"column_start":12,"column_end":22},"name":"rustc_iter","qualname":"<IntoIter<K, V>>::rustc_iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a iterator of references over the remaining items.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176551,"byte_end":176560,"line_start":561,"line_end":561,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1022},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176760,"byte_end":176770,"line_start":570,"line_end":570,"column_start":12,"column_end":22},"name":"rustc_iter","qualname":"<Drain>::rustc_iter","value":"fn (&self) -> Iter<'_, K, V>","parent":null,"children":[],"decl_id":null,"docs":" Returns a iterator of references over the remaining items.\n","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176739,"byte_end":176748,"line_start":569,"line_end":569,"column_start":5,"column_end":14}}]},{"kind":"Struct","id":{"krate":0,"index":1027},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/scopeguard.rs","byte_start":176912,"byte_end":176922,"line_start":4,"line_end":4,"column_start":12,"column_end":22},"name":"ScopeGuard","qualname":"::scopeguard::ScopeGuard","value":"ScopeGuard {  }","parent":null,"children":[{"krate":0,"index":1030},{"krate":0,"index":1031}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Function","id":{"krate":0,"index":1032},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/scopeguard.rs","byte_start":177008,"byte_end":177013,"line_start":13,"line_end":13,"column_start":8,"column_end":13},"name":"guard","qualname":"::scopeguard::guard","value":"fn <T, F> (value: T, dropfn: F) -> ScopeGuard<T, F>","parent":null,"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/scopeguard.rs","byte_start":176991,"byte_end":177000,"line_start":12,"line_end":12,"column_start":1,"column_end":10}}]},{"kind":"Struct","id":{"krate":0,"index":1424},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":181526,"byte_end":181533,"line_start":115,"line_end":115,"column_start":12,"column_end":19},"name":"HashSet","qualname":"::set::HashSet","value":"HashSet {  }","parent":null,"children":[{"krate":0,"index":1427}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1071},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":181994,"byte_end":181997,"line_start":132,"line_end":132,"column_start":12,"column_end":15},"name":"new","qualname":"<HashSet<T, DefaultHashBuilder>>::new","value":"fn () -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":181973,"byte_end":181982,"line_start":131,"line_end":131,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1072},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":182515,"byte_end":182528,"line_start":151,"line_end":151,"column_start":12,"column_end":25},"name":"with_capacity","qualname":"<HashSet<T, DefaultHashBuilder>>::with_capacity","value":"fn (capacity: usize) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":182494,"byte_end":182503,"line_start":150,"line_end":150,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1076},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":182963,"byte_end":182971,"line_start":169,"line_end":169,"column_start":12,"column_end":20},"name":"capacity","qualname":"<HashSet<T, S>>::capacity","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements the set can hold without reallocating.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":182942,"byte_end":182951,"line_start":168,"line_end":168,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1077},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":183461,"byte_end":183465,"line_start":190,"line_end":190,"column_start":12,"column_end":16},"name":"iter","qualname":"<HashSet<T, S>>::iter","value":"fn (&self) -> Iter<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" An iterator visiting all elements in arbitrary order.\n The iterator element type is `&'a T`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":183440,"byte_end":183449,"line_start":189,"line_end":189,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1078},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":183853,"byte_end":183856,"line_start":209,"line_end":209,"column_start":12,"column_end":15},"name":"len","qualname":"<HashSet<T, S>>::len","value":"fn (&self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the set.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":183832,"byte_end":183841,"line_start":208,"line_end":208,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1079},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":184205,"byte_end":184213,"line_start":226,"line_end":226,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<HashSet<T, S>>::is_empty","value":"fn (&self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains no elements.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":184184,"byte_end":184193,"line_start":225,"line_end":225,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1080},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":184726,"byte_end":184731,"line_start":248,"line_end":248,"column_start":12,"column_end":17},"name":"drain","qualname":"<HashSet<T, S>>::drain","value":"fn (&mut self) -> Drain<'_, T>","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, returning all elements in an iterator.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":184705,"byte_end":184714,"line_start":247,"line_end":247,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1081},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":185106,"byte_end":185111,"line_start":267,"line_end":267,"column_start":12,"column_end":17},"name":"clear","qualname":"<HashSet<T, S>>::clear","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Clears the set, removing all values.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":185085,"byte_end":185094,"line_start":266,"line_end":266,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1085},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":185974,"byte_end":185985,"line_start":298,"line_end":298,"column_start":12,"column_end":23},"name":"with_hasher","qualname":"<HashSet<T, S>>::with_hasher","value":"fn (hasher: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates a new empty hash set which will use the given hasher to hash\n keys.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":185953,"byte_end":185962,"line_start":297,"line_end":297,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1086},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":186942,"byte_end":186966,"line_start":326,"line_end":326,"column_start":12,"column_end":36},"name":"with_capacity_and_hasher","qualname":"<HashSet<T, S>>::with_capacity_and_hasher","value":"fn (capacity: usize, hasher: S) -> Self","parent":null,"children":[],"decl_id":null,"docs":" Creates an empty `HashSet` with the specified capacity, using\n `hasher` to hash the keys.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":186921,"byte_end":186930,"line_start":325,"line_end":325,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1087},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":187603,"byte_end":187609,"line_start":347,"line_end":347,"column_start":12,"column_end":18},"name":"hasher","qualname":"<HashSet<T, S>>::hasher","value":"fn (&self) -> &S","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the set's [`BuildHasher`].","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":187582,"byte_end":187591,"line_start":346,"line_end":346,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1088},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":188170,"byte_end":188177,"line_start":368,"line_end":368,"column_start":12,"column_end":19},"name":"reserve","qualname":"<HashSet<T, S>>::reserve","value":"fn (&mut self, additional: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Reserves capacity for at least `additional` more elements to be inserted\n in the `HashSet`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":188149,"byte_end":188158,"line_start":367,"line_end":367,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1089},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":188849,"byte_end":188860,"line_start":389,"line_end":389,"column_start":12,"column_end":23},"name":"try_reserve","qualname":"<HashSet<T, S>>::try_reserve","value":"fn (&mut self, additional: usize) -> Result<(), CollectionAllocErr>","parent":null,"children":[],"decl_id":null,"docs":" Tries to reserve capacity for at least `additional` more elements to be inserted\n in the given `HashSet<K,V>`. The collection may reserve more space to avoid\n frequent reallocations.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":188828,"byte_end":188837,"line_start":388,"line_end":388,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1090},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":189525,"byte_end":189538,"line_start":410,"line_end":410,"column_start":12,"column_end":25},"name":"shrink_to_fit","qualname":"<HashSet<T, S>>::shrink_to_fit","value":"fn (&mut self) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set as much as possible. It will drop\n down as much as possible while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":189504,"byte_end":189513,"line_start":409,"line_end":409,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1091},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":190319,"byte_end":190328,"line_start":436,"line_end":436,"column_start":12,"column_end":21},"name":"shrink_to","qualname":"<HashSet<T, S>>::shrink_to","value":"fn (&mut self, min_capacity: usize) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Shrinks the capacity of the set with a lower limit. It will drop\n down no lower than the supplied limit while maintaining the internal rules\n and possibly leaving some space in accordance with the resize policy.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":190298,"byte_end":190307,"line_start":435,"line_end":435,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1092},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":191235,"byte_end":191245,"line_start":464,"line_end":464,"column_start":12,"column_end":22},"name":"difference","qualname":"<HashSet<T, S>>::difference","value":"fn <'a> (&'a self, other: &'a Self) -> Difference<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the difference,\n i.e., the values that are in `self` but not in `other`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":191214,"byte_end":191223,"line_start":463,"line_end":463,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1094},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":192159,"byte_end":192179,"line_start":493,"line_end":493,"column_start":12,"column_end":32},"name":"symmetric_difference","qualname":"<HashSet<T, S>>::symmetric_difference","value":"fn <'a> (&'a self, other: &'a Self) -> SymmetricDifference<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the symmetric difference,\n i.e., the values that are in `self` or in `other` but not in both.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":192138,"byte_end":192147,"line_start":492,"line_end":492,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1096},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":192998,"byte_end":193010,"line_start":518,"line_end":518,"column_start":12,"column_end":24},"name":"intersection","qualname":"<HashSet<T, S>>::intersection","value":"fn <'a> (&'a self, other: &'a Self) -> Intersection<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the intersection,\n i.e., the values that are both in `self` and `other`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":192977,"byte_end":192986,"line_start":517,"line_end":517,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1098},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":193779,"byte_end":193784,"line_start":544,"line_end":544,"column_start":12,"column_end":17},"name":"union","qualname":"<HashSet<T, S>>::union","value":"fn <'a> (&'a self, other: &'a Self) -> Union<'a, T, S>","parent":null,"children":[],"decl_id":null,"docs":" Visits the values representing the union,\n i.e., all the values in `self` or `other`, without duplicates.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":193758,"byte_end":193767,"line_start":543,"line_end":543,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1100},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":194580,"byte_end":194588,"line_start":569,"line_end":569,"column_start":12,"column_end":20},"name":"contains","qualname":"<HashSet<T, S>>::contains","value":"fn <Q> (&self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set contains a value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":194559,"byte_end":194568,"line_start":568,"line_end":568,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1102},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":195415,"byte_end":195418,"line_start":596,"line_end":596,"column_start":12,"column_end":15},"name":"get","qualname":"<HashSet<T, S>>::get","value":"fn <Q> (&self, value: &Q) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Returns a reference to the value in the set, if any, that is equal to the given value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":195394,"byte_end":195403,"line_start":595,"line_end":595,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1105},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":196119,"byte_end":196130,"line_start":621,"line_end":621,"column_start":12,"column_end":23},"name":"is_disjoint","qualname":"<HashSet<T, S>>::is_disjoint","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if `self` has no elements in common with `other`.\n This is equivalent to checking for an empty intersection.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1107},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":196752,"byte_end":196761,"line_start":642,"line_end":642,"column_start":12,"column_end":21},"name":"is_subset","qualname":"<HashSet<T, S>>::is_subset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a subset of another,\n i.e., `other` contains at least all the values in `self`.","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":1109},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":197529,"byte_end":197540,"line_start":671,"line_end":671,"column_start":12,"column_end":23},"name":"is_superset","qualname":"<HashSet<T, S>>::is_superset","value":"fn (&self, other: &Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Returns `true` if the set is a superset of another,\n i.e., `self` contains at least all the values in `other`.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":197508,"byte_end":197517,"line_start":670,"line_end":670,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1110},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":198086,"byte_end":198092,"line_start":693,"line_end":693,"column_start":12,"column_end":18},"name":"insert","qualname":"<HashSet<T, S>>::insert","value":"fn (&mut self, value: T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":198065,"byte_end":198074,"line_start":692,"line_end":692,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1111},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":198692,"byte_end":198699,"line_start":713,"line_end":713,"column_start":12,"column_end":19},"name":"replace","qualname":"<HashSet<T, S>>::replace","value":"fn (&mut self, value: T) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Adds a value to the set, replacing the existing value, if any, that is equal to the given\n one. Returns the replaced value.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":198671,"byte_end":198680,"line_start":712,"line_end":712,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1112},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":199672,"byte_end":199678,"line_start":745,"line_end":745,"column_start":12,"column_end":18},"name":"remove","qualname":"<HashSet<T, S>>::remove","value":"fn <Q> (&mut self, value: &Q) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Removes a value from the set. Returns whether the value was\n present in the set.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":199651,"byte_end":199660,"line_start":744,"line_end":744,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1114},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":200513,"byte_end":200517,"line_start":772,"line_end":772,"column_start":12,"column_end":16},"name":"take","qualname":"<HashSet<T, S>>::take","value":"fn <Q> (&mut self, value: &Q) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Removes and returns the value in the set, if any, that is equal to the given one.","sig":null,"attributes":[{"value":"inline","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":200492,"byte_end":200501,"line_start":771,"line_end":771,"column_start":5,"column_end":14}}]},{"kind":"Method","id":{"krate":0,"index":1117},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":201116,"byte_end":201122,"line_start":794,"line_end":794,"column_start":12,"column_end":18},"name":"retain","qualname":"<HashSet<T, S>>::retain","value":"fn <F> (&mut self, mut f: F) -> ()","parent":null,"children":[],"decl_id":null,"docs":" Retains only the elements specified by the predicate.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1173},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":206355,"byte_end":206359,"line_start":1017,"line_end":1017,"column_start":12,"column_end":16},"name":"Iter","qualname":"::set::Iter","value":"Iter {  }","parent":null,"children":[{"krate":0,"index":1176}],"decl_id":null,"docs":" An iterator over the items of a `HashSet`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1177},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":206724,"byte_end":206732,"line_start":1028,"line_end":1028,"column_start":12,"column_end":20},"name":"IntoIter","qualname":"::set::IntoIter","value":"IntoIter {  }","parent":null,"children":[{"krate":0,"index":1179}],"decl_id":null,"docs":" An owning iterator over the items of a `HashSet`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1180},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":207037,"byte_end":207042,"line_start":1039,"line_end":1039,"column_start":12,"column_end":17},"name":"Drain","qualname":"::set::Drain","value":"Drain {  }","parent":null,"children":[{"krate":0,"index":1183}],"decl_id":null,"docs":" A draining iterator over the items of a `HashSet`.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1184},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":207392,"byte_end":207404,"line_start":1050,"line_end":1050,"column_start":12,"column_end":24},"name":"Intersection","qualname":"::set::Intersection","value":"Intersection {  }","parent":null,"children":[{"krate":0,"index":1188},{"krate":0,"index":1189}],"decl_id":null,"docs":" A lazy iterator producing elements in the intersection of `HashSet`s.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1190},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":207824,"byte_end":207834,"line_start":1064,"line_end":1064,"column_start":12,"column_end":22},"name":"Difference","qualname":"::set::Difference","value":"Difference {  }","parent":null,"children":[{"krate":0,"index":1194},{"krate":0,"index":1195}],"decl_id":null,"docs":" A lazy iterator producing elements in the difference of `HashSet`s.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1196},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":208294,"byte_end":208313,"line_start":1078,"line_end":1078,"column_start":12,"column_end":31},"name":"SymmetricDifference","qualname":"::set::SymmetricDifference","value":"SymmetricDifference {  }","parent":null,"children":[{"krate":0,"index":1200}],"decl_id":null,"docs":" A lazy iterator producing elements in the symmetric difference of `HashSet`s.","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":1201},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":208666,"byte_end":208671,"line_start":1089,"line_end":1089,"column_start":12,"column_end":17},"name":"Union","qualname":"::set::Union","value":"Union {  }","parent":null,"children":[{"krate":0,"index":1205}],"decl_id":null,"docs":" A lazy iterator producing elements in the union of `HashSet`s.","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1361},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":1208,"byte_end":1216,"line_start":50,"line_end":50,"column_start":9,"column_end":17},"name":"hash_map","qualname":"::hash_map","value":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1362},{"krate":0,"index":1363}],"decl_id":null,"docs":" A hash map implemented with quadratic probing and SIMD lookup.\n","sig":null,"attributes":[]},{"kind":"Mod","id":{"krate":0,"index":1364},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":1761,"byte_end":1769,"line_start":67,"line_end":67,"column_start":9,"column_end":17},"name":"hash_set","qualname":"::hash_set","value":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","parent":null,"children":[{"krate":0,"index":1365}],"decl_id":null,"docs":" A hash set implemented as a `HashMap` where the value is `()`.\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1433},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":2537,"byte_end":2553,"line_start":90,"line_end":90,"column_start":5,"column_end":21},"name":"CapacityOverflow","qualname":"::CollectionAllocErr::CapacityOverflow","value":"CollectionAllocErr::CapacityOverflow","parent":{"krate":0,"index":1432},"children":[],"decl_id":null,"docs":" Error due to the computed capacity exceeding the collection's maximum\n (usually `isize::MAX` bytes).\n","sig":null,"attributes":[]},{"kind":"TupleVariant","id":{"krate":0,"index":1435},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":2628,"byte_end":2636,"line_start":92,"line_end":92,"column_start":5,"column_end":13},"name":"AllocErr","qualname":"::CollectionAllocErr::AllocErr","value":"CollectionAllocErr::AllocErr","parent":{"krate":0,"index":1432},"children":[],"decl_id":null,"docs":" Error due to the allocator (see the `AllocErr` type's docs).\n","sig":null,"attributes":[]},{"kind":"Enum","id":{"krate":0,"index":1432},"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":2396,"byte_end":2414,"line_start":87,"line_end":87,"column_start":10,"column_end":28},"name":"CollectionAllocErr","qualname":"::CollectionAllocErr","value":"CollectionAllocErr::{CapacityOverflow, AllocErr}","parent":null,"children":[{"krate":0,"index":1433},{"krate":0,"index":1435}],"decl_id":null,"docs":" Augments `AllocErr` with a `CapacityOverflow` variant.\n","sig":null,"attributes":[{"value":"structural_match","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/lib.rs","byte_start":2387,"byte_end":2639,"line_start":87,"line_end":93,"column_start":1,"column_end":2}}]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/fx.rs","byte_start":5722,"byte_end":5730,"line_start":31,"line_end":31,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":29}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/fx.rs","byte_start":5813,"byte_end":5821,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/fx.rs","byte_start":5977,"byte_end":5985,"line_start":45,"line_end":45,"column_start":17,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":33},{"krate":0,"index":35},{"krate":0,"index":36},{"krate":0,"index":37},{"krate":0,"index":38},{"krate":0,"index":39},{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":15057,"byte_end":15064,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":70},{"krate":0,"index":71}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":16042,"byte_end":16049,"line_start":234,"line_end":234,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":76},{"krate":0,"index":77},{"krate":0,"index":78},{"krate":0,"index":79},{"krate":0,"index":80},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85},{"krate":0,"index":86},{"krate":0,"index":87},{"krate":0,"index":88}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":24293,"byte_end":24300,"line_start":551,"line_end":551,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":93},{"krate":0,"index":95},{"krate":0,"index":97},{"krate":0,"index":99},{"krate":0,"index":101},{"krate":0,"index":103},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":112},{"krate":0,"index":116},{"krate":0,"index":119},{"krate":0,"index":122},{"krate":0,"index":125}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":36872,"byte_end":36879,"line_start":954,"line_end":954,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":131},{"krate":0,"index":132}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":39768,"byte_end":39775,"line_start":1015,"line_end":1015,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":137}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":40096,"byte_end":40103,"line_start":1031,"line_end":1031,"column_start":22,"column_end":29},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":40197,"byte_end":40204,"line_start":1039,"line_end":1039,"column_start":25,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":148}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":40420,"byte_end":40427,"line_start":1050,"line_end":1050,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":153}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":40696,"byte_end":40703,"line_start":1061,"line_end":1061,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":159},{"krate":0,"index":160}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":41514,"byte_end":41518,"line_start":1093,"line_end":1093,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":170}],"docs":"","sig":null,"attributes":[]},{"id":13,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":41721,"byte_end":41725,"line_start":1103,"line_end":1103,"column_start":41,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":174}],"docs":"","sig":null,"attributes":[]},{"id":14,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":42503,"byte_end":42510,"line_start":1125,"line_end":1125,"column_start":40,"column_end":47},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":15,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":42536,"byte_end":42543,"line_start":1127,"line_end":1127,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":187}],"docs":"","sig":null,"attributes":[]},{"id":16,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":43183,"byte_end":43191,"line_start":1149,"line_end":1149,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":195}],"docs":"","sig":null,"attributes":[]},{"id":17,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":43811,"byte_end":43815,"line_start":1172,"line_end":1172,"column_start":22,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":204}],"docs":"","sig":null,"attributes":[]},{"id":18,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":43978,"byte_end":43982,"line_start":1181,"line_end":1181,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":208}],"docs":"","sig":null,"attributes":[]},{"id":19,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":44506,"byte_end":44512,"line_start":1199,"line_end":1199,"column_start":22,"column_end":28},"value":"","parent":null,"children":[{"krate":0,"index":217}],"docs":"","sig":null,"attributes":[]},{"id":20,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":44677,"byte_end":44683,"line_start":1208,"line_end":1208,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":221}],"docs":"","sig":null,"attributes":[]},{"id":21,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":45153,"byte_end":45158,"line_start":1225,"line_end":1225,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":230}],"docs":"","sig":null,"attributes":[]},{"id":22,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":47396,"byte_end":47414,"line_start":1299,"line_end":1299,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":277},{"krate":0,"index":279}],"docs":"","sig":null,"attributes":[]},{"id":23,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":48206,"byte_end":48224,"line_start":1328,"line_end":1328,"column_start":19,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":287},{"krate":0,"index":290}],"docs":"","sig":null,"attributes":[]},{"id":24,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":49136,"byte_end":49151,"line_start":1360,"line_end":1360,"column_start":19,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":299},{"krate":0,"index":301},{"krate":0,"index":304},{"krate":0,"index":308}],"docs":"","sig":null,"attributes":[]},{"id":25,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":50530,"byte_end":50541,"line_start":1413,"line_end":1413,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":315},{"krate":0,"index":316},{"krate":0,"index":318}],"docs":"","sig":null,"attributes":[]},{"id":26,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":53546,"byte_end":53565,"line_start":1514,"line_end":1514,"column_start":16,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":324},{"krate":0,"index":325},{"krate":0,"index":326},{"krate":0,"index":327},{"krate":0,"index":328},{"krate":0,"index":329},{"krate":0,"index":330},{"krate":0,"index":331},{"krate":0,"index":332},{"krate":0,"index":333},{"krate":0,"index":334},{"krate":0,"index":335},{"krate":0,"index":336}],"docs":"","sig":null,"attributes":[]},{"id":27,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":56295,"byte_end":56312,"line_start":1609,"line_end":1609,"column_start":19,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":342},{"krate":0,"index":343},{"krate":0,"index":345}],"docs":"","sig":null,"attributes":[]},{"id":28,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":57706,"byte_end":57724,"line_start":1657,"line_end":1657,"column_start":25,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":352}],"docs":"","sig":null,"attributes":[]},{"id":29,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":57901,"byte_end":57912,"line_start":1663,"line_end":1663,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":357}],"docs":"","sig":null,"attributes":[]},{"id":30,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":58243,"byte_end":58262,"line_start":1672,"line_end":1672,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":361}],"docs":"","sig":null,"attributes":[]},{"id":31,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":58517,"byte_end":58534,"line_start":1681,"line_end":1681,"column_start":25,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":366}],"docs":"","sig":null,"attributes":[]},{"id":32,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":58699,"byte_end":58714,"line_start":1687,"line_end":1687,"column_start":25,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":371}],"docs":"","sig":null,"attributes":[]},{"id":33,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":59315,"byte_end":59320,"line_start":1707,"line_end":1707,"column_start":39,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":387}],"docs":"","sig":null,"attributes":[]},{"id":34,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":59877,"byte_end":59890,"line_start":1726,"line_end":1726,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":35,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":59983,"byte_end":59996,"line_start":1733,"line_end":1733,"column_start":31,"column_end":44},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":36,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":60098,"byte_end":60111,"line_start":1741,"line_end":1741,"column_start":39,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":408}],"docs":"","sig":null,"attributes":[]},{"id":37,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":60595,"byte_end":60606,"line_start":1760,"line_end":1760,"column_start":32,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":421}],"docs":"","sig":null,"attributes":[]},{"id":38,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":61233,"byte_end":61240,"line_start":1786,"line_end":1786,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":442},{"krate":0,"index":443},{"krate":0,"index":444}],"docs":"","sig":null,"attributes":[]},{"id":39,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":61984,"byte_end":61988,"line_start":1815,"line_end":1815,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":449},{"krate":0,"index":450},{"krate":0,"index":452}],"docs":"","sig":null,"attributes":[]},{"id":40,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":62354,"byte_end":62358,"line_start":1830,"line_end":1830,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":456}],"docs":"","sig":null,"attributes":[]},{"id":41,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":62477,"byte_end":62481,"line_start":1837,"line_end":1837,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":42,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":62524,"byte_end":62531,"line_start":1839,"line_end":1839,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":464},{"krate":0,"index":465},{"krate":0,"index":467}],"docs":"","sig":null,"attributes":[]},{"id":43,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":62909,"byte_end":62916,"line_start":1854,"line_end":1854,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":471}],"docs":"","sig":null,"attributes":[]},{"id":44,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63034,"byte_end":63041,"line_start":1860,"line_end":1860,"column_start":30,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":45,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63082,"byte_end":63089,"line_start":1862,"line_end":1862,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":478}],"docs":"","sig":null,"attributes":[]},{"id":46,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63295,"byte_end":63303,"line_start":1872,"line_end":1872,"column_start":25,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":482},{"krate":0,"index":483},{"krate":0,"index":484}],"docs":"","sig":null,"attributes":[]},{"id":47,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63564,"byte_end":63572,"line_start":1884,"line_end":1884,"column_start":34,"column_end":42},"value":"","parent":null,"children":[{"krate":0,"index":488}],"docs":"","sig":null,"attributes":[]},{"id":48,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63686,"byte_end":63694,"line_start":1890,"line_end":1890,"column_start":30,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":49,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63745,"byte_end":63753,"line_start":1892,"line_end":1892,"column_start":41,"column_end":49},"value":"","parent":null,"children":[{"krate":0,"index":495}],"docs":"","sig":null,"attributes":[]},{"id":50,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63915,"byte_end":63919,"line_start":1898,"line_end":1898,"column_start":29,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":500},{"krate":0,"index":501},{"krate":0,"index":503}],"docs":"","sig":null,"attributes":[]},{"id":51,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64200,"byte_end":64204,"line_start":1910,"line_end":1910,"column_start":34,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":507}],"docs":"","sig":null,"attributes":[]},{"id":52,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64322,"byte_end":64326,"line_start":1916,"line_end":1916,"column_start":30,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":53,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64369,"byte_end":64375,"line_start":1918,"line_end":1918,"column_start":29,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":515},{"krate":0,"index":516},{"krate":0,"index":518}],"docs":"","sig":null,"attributes":[]},{"id":54,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64656,"byte_end":64662,"line_start":1930,"line_end":1930,"column_start":34,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":522}],"docs":"","sig":null,"attributes":[]},{"id":55,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64780,"byte_end":64786,"line_start":1936,"line_end":1936,"column_start":30,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":56,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64829,"byte_end":64838,"line_start":1938,"line_end":1938,"column_start":29,"column_end":38},"value":"","parent":null,"children":[{"krate":0,"index":530},{"krate":0,"index":531},{"krate":0,"index":533}],"docs":"","sig":null,"attributes":[]},{"id":57,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65127,"byte_end":65136,"line_start":1950,"line_end":1950,"column_start":34,"column_end":43},"value":"","parent":null,"children":[{"krate":0,"index":537}],"docs":"","sig":null,"attributes":[]},{"id":58,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65254,"byte_end":65263,"line_start":1956,"line_end":1956,"column_start":30,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":59,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65304,"byte_end":65313,"line_start":1958,"line_end":1958,"column_start":27,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":544}],"docs":"","sig":null,"attributes":[]},{"id":60,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65529,"byte_end":65534,"line_start":1968,"line_end":1968,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":549},{"krate":0,"index":550},{"krate":0,"index":551}],"docs":"","sig":null,"attributes":[]},{"id":61,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65799,"byte_end":65804,"line_start":1980,"line_end":1980,"column_start":34,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":555}],"docs":"","sig":null,"attributes":[]},{"id":62,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65922,"byte_end":65927,"line_start":1986,"line_end":1986,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":63,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65968,"byte_end":65973,"line_start":1988,"line_end":1988,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":562}],"docs":"","sig":null,"attributes":[]},{"id":64,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":66173,"byte_end":66178,"line_start":1998,"line_end":1998,"column_start":19,"column_end":24},"value":"","parent":null,"children":[{"krate":0,"index":568},{"krate":0,"index":569},{"krate":0,"index":571},{"krate":0,"index":572}],"docs":"","sig":null,"attributes":[]},{"id":65,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":69140,"byte_end":69145,"line_start":2107,"line_end":2107,"column_start":28,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":579}],"docs":"","sig":null,"attributes":[]},{"id":66,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":69901,"byte_end":69914,"line_start":2136,"line_end":2136,"column_start":19,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":585},{"krate":0,"index":586},{"krate":0,"index":587},{"krate":0,"index":588},{"krate":0,"index":589},{"krate":0,"index":590},{"krate":0,"index":591},{"krate":0,"index":592},{"krate":0,"index":593}],"docs":"","sig":null,"attributes":[]},{"id":67,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":76569,"byte_end":76580,"line_start":2366,"line_end":2366,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":599},{"krate":0,"index":600},{"krate":0,"index":601}],"docs":"","sig":null,"attributes":[]},{"id":68,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":78254,"byte_end":78261,"line_start":2432,"line_end":2432,"column_start":40,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":607}],"docs":"","sig":null,"attributes":[]},{"id":69,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":78663,"byte_end":78670,"line_start":2448,"line_end":2448,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":614}],"docs":"","sig":null,"attributes":[]},{"id":70,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":79422,"byte_end":79429,"line_start":2472,"line_end":2472,"column_start":46,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":622}],"docs":"","sig":null,"attributes":[]},{"id":71,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5317831,"byte_end":5317836,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"value":"","parent":null,"children":[{"krate":0,"index":1388},{"krate":0,"index":1389},{"krate":0,"index":1396},{"krate":0,"index":1397},{"krate":0,"index":1398},{"krate":0,"index":1399},{"krate":0,"index":1400},{"krate":0,"index":1401},{"krate":0,"index":1402},{"krate":0,"index":1403}],"docs":"","sig":null,"attributes":[]},{"id":72,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158079,"byte_end":158086,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"value":"","parent":null,"children":[{"krate":0,"index":675},{"krate":0,"index":676},{"krate":0,"index":677},{"krate":0,"index":678},{"krate":0,"index":679},{"krate":0,"index":680},{"krate":0,"index":681}],"docs":"","sig":null,"attributes":[]},{"id":73,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":160199,"byte_end":160206,"line_start":85,"line_end":85,"column_start":23,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":683},{"krate":0,"index":684},{"krate":0,"index":685}],"docs":"","sig":null,"attributes":[]},{"id":74,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":160494,"byte_end":160505,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":690},{"krate":0,"index":691}],"docs":"","sig":null,"attributes":[]},{"id":75,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":111872,"byte_end":111883,"line_start":72,"line_end":72,"column_start":6,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":700},{"krate":0,"index":701}],"docs":"","sig":null,"attributes":[]},{"id":76,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":114543,"byte_end":114551,"line_start":152,"line_end":152,"column_start":19,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":714},{"krate":0,"index":715}],"docs":"","sig":null,"attributes":[]},{"id":77,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":118620,"byte_end":118626,"line_start":265,"line_end":265,"column_start":25,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":78,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":118652,"byte_end":118658,"line_start":267,"line_end":267,"column_start":19,"column_end":25},"value":"","parent":null,"children":[{"krate":0,"index":727}],"docs":"","sig":null,"attributes":[]},{"id":79,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":118756,"byte_end":118762,"line_start":274,"line_end":274,"column_start":9,"column_end":15},"value":"","parent":null,"children":[{"krate":0,"index":730},{"krate":0,"index":731},{"krate":0,"index":732},{"krate":0,"index":733},{"krate":0,"index":734},{"krate":0,"index":735},{"krate":0,"index":736},{"krate":0,"index":738},{"krate":0,"index":740}],"docs":"","sig":null,"attributes":[]},{"id":80,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":120780,"byte_end":120788,"line_start":350,"line_end":350,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":751},{"krate":0,"index":752},{"krate":0,"index":755},{"krate":0,"index":757},{"krate":0,"index":759},{"krate":0,"index":761},{"krate":0,"index":762},{"krate":0,"index":763},{"krate":0,"index":764},{"krate":0,"index":765},{"krate":0,"index":766},{"krate":0,"index":767},{"krate":0,"index":768},{"krate":0,"index":769},{"krate":0,"index":771},{"krate":0,"index":774},{"krate":0,"index":777},{"krate":0,"index":779},{"krate":0,"index":782},{"krate":0,"index":786},{"krate":0,"index":789},{"krate":0,"index":791},{"krate":0,"index":792},{"krate":0,"index":794},{"krate":0,"index":795},{"krate":0,"index":796},{"krate":0,"index":797},{"krate":0,"index":798},{"krate":0,"index":799},{"krate":0,"index":800},{"krate":0,"index":801}],"docs":"","sig":null,"attributes":[]},{"id":81,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":144279,"byte_end":144287,"line_start":948,"line_end":948,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":82,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":144332,"byte_end":144340,"line_start":949,"line_end":949,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":83,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":144387,"byte_end":144395,"line_start":951,"line_end":951,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":809}],"docs":"","sig":null,"attributes":[]},{"id":84,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":146458,"byte_end":146466,"line_start":1004,"line_end":1004,"column_start":39,"column_end":47},"value":"","parent":null,"children":[{"krate":0,"index":814}],"docs":"","sig":null,"attributes":[]},{"id":85,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":147234,"byte_end":147242,"line_start":1036,"line_end":1036,"column_start":26,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":817},{"krate":0,"index":818},{"krate":0,"index":819}],"docs":"","sig":null,"attributes":[]},{"id":86,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":148169,"byte_end":148181,"line_start":1072,"line_end":1072,"column_start":9,"column_end":21},"value":"","parent":null,"children":[{"krate":0,"index":828}],"docs":"","sig":null,"attributes":[]},{"id":87,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":150857,"byte_end":150869,"line_start":1138,"line_end":1138,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":88,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":150900,"byte_end":150912,"line_start":1139,"line_end":1139,"column_start":25,"column_end":37},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":89,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":150938,"byte_end":150950,"line_start":1141,"line_end":1141,"column_start":19,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":835}],"docs":"","sig":null,"attributes":[]},{"id":90,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":151205,"byte_end":151217,"line_start":1153,"line_end":1153,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":838},{"krate":0,"index":839},{"krate":0,"index":840}],"docs":"","sig":null,"attributes":[]},{"id":91,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":152608,"byte_end":152620,"line_start":1191,"line_end":1191,"column_start":27,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":92,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":152798,"byte_end":152805,"line_start":1199,"line_end":1199,"column_start":19,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":849}],"docs":"","sig":null,"attributes":[]},{"id":93,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":152978,"byte_end":152985,"line_start":1209,"line_end":1209,"column_start":22,"column_end":29},"value":"","parent":null,"children":[{"krate":0,"index":852},{"krate":0,"index":853},{"krate":0,"index":854}],"docs":"","sig":null,"attributes":[]},{"id":94,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":153600,"byte_end":153607,"line_start":1232,"line_end":1232,"column_start":31,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":95,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":153640,"byte_end":153647,"line_start":1233,"line_end":1233,"column_start":27,"column_end":34},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":96,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":153844,"byte_end":153855,"line_start":1242,"line_end":1242,"column_start":9,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":866}],"docs":"","sig":null,"attributes":[]},{"id":97,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":153973,"byte_end":153984,"line_start":1249,"line_end":1249,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":98,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":154029,"byte_end":154040,"line_start":1250,"line_end":1250,"column_start":25,"column_end":36},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":99,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":154128,"byte_end":154139,"line_start":1253,"line_end":1253,"column_start":39,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":873}],"docs":"","sig":null,"attributes":[]},{"id":100,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":155086,"byte_end":155097,"line_start":1291,"line_end":1291,"column_start":22,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":876},{"krate":0,"index":877},{"krate":0,"index":878}],"docs":"","sig":null,"attributes":[]},{"id":101,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":155367,"byte_end":155378,"line_start":1305,"line_end":1305,"column_start":31,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":102,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":155411,"byte_end":155422,"line_start":1306,"line_end":1306,"column_start":27,"column_end":38},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":103,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":155962,"byte_end":155970,"line_start":1323,"line_end":1323,"column_start":9,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":892}],"docs":"","sig":null,"attributes":[]},{"id":104,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":156092,"byte_end":156100,"line_start":1330,"line_end":1330,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":105,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":156149,"byte_end":156157,"line_start":1331,"line_end":1331,"column_start":25,"column_end":33},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":106,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":156200,"byte_end":156208,"line_start":1333,"line_end":1333,"column_start":18,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":899}],"docs":"","sig":null,"attributes":[]},{"id":107,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":156877,"byte_end":156885,"line_start":1356,"line_end":1356,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":902},{"krate":0,"index":903},{"krate":0,"index":904}],"docs":"","sig":null,"attributes":[]},{"id":108,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":157208,"byte_end":157216,"line_start":1373,"line_end":1373,"column_start":31,"column_end":39},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":109,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":157253,"byte_end":157261,"line_start":1374,"line_end":1374,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":110,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":160932,"byte_end":160939,"line_start":8,"line_end":8,"column_start":15,"column_end":22},"value":"","parent":null,"children":[{"krate":0,"index":932}],"docs":"","sig":null,"attributes":[]},{"id":111,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":162807,"byte_end":162817,"line_start":70,"line_end":70,"column_start":36,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":947}],"docs":"","sig":null,"attributes":[]},{"id":112,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":163371,"byte_end":163389,"line_start":89,"line_end":89,"column_start":28,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":113,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":163463,"byte_end":163481,"line_start":95,"line_end":95,"column_start":28,"column_end":46},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":114,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":163564,"byte_end":163582,"line_start":102,"line_end":102,"column_start":36,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":964}],"docs":"","sig":null,"attributes":[]},{"id":115,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":164077,"byte_end":164093,"line_start":121,"line_end":121,"column_start":29,"column_end":45},"value":"","parent":null,"children":[{"krate":0,"index":975}],"docs":"","sig":null,"attributes":[]},{"id":116,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":164257,"byte_end":164267,"line_start":127,"line_end":127,"column_start":16,"column_end":26},"value":"","parent":null,"children":[{"krate":0,"index":980},{"krate":0,"index":981},{"krate":0,"index":983},{"krate":0,"index":984}],"docs":"","sig":null,"attributes":[]},{"id":117,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":167141,"byte_end":167151,"line_start":234,"line_end":234,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":990}],"docs":"","sig":null,"attributes":[]},{"id":118,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":167869,"byte_end":167887,"line_start":262,"line_end":262,"column_start":16,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":995},{"krate":0,"index":996},{"krate":0,"index":997},{"krate":0,"index":998},{"krate":0,"index":999},{"krate":0,"index":1000},{"krate":0,"index":1001},{"krate":0,"index":1002},{"krate":0,"index":1003}],"docs":"","sig":null,"attributes":[]},{"id":119,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":174731,"byte_end":174747,"line_start":492,"line_end":492,"column_start":16,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1008},{"krate":0,"index":1009},{"krate":0,"index":1010}],"docs":"","sig":null,"attributes":[]},{"id":120,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176273,"byte_end":176280,"line_start":551,"line_end":551,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1014}],"docs":"","sig":null,"attributes":[]},{"id":121,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176463,"byte_end":176471,"line_start":559,"line_end":559,"column_start":12,"column_end":20},"value":"","parent":null,"children":[{"krate":0,"index":1018}],"docs":"","sig":null,"attributes":[]},{"id":122,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176650,"byte_end":176655,"line_start":567,"line_end":567,"column_start":12,"column_end":17},"value":"","parent":null,"children":[{"krate":0,"index":1022}],"docs":"","sig":null,"attributes":[]},{"id":123,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/scopeguard.rs","byte_start":177148,"byte_end":177158,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1038},{"krate":0,"index":1039}],"docs":"","sig":null,"attributes":[]},{"id":124,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/scopeguard.rs","byte_start":177311,"byte_end":177321,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"value":"","parent":null,"children":[{"krate":0,"index":1043}],"docs":"","sig":null,"attributes":[]},{"id":125,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/scopeguard.rs","byte_start":177465,"byte_end":177475,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1047}],"docs":"","sig":null,"attributes":[]},{"id":126,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":181624,"byte_end":181631,"line_start":119,"line_end":119,"column_start":20,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1071},{"krate":0,"index":1072}],"docs":"","sig":null,"attributes":[]},{"id":127,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":182652,"byte_end":182659,"line_start":158,"line_end":158,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1076},{"krate":0,"index":1077},{"krate":0,"index":1078},{"krate":0,"index":1079},{"krate":0,"index":1080},{"krate":0,"index":1081}],"docs":"","sig":null,"attributes":[]},{"id":128,"kind":"Inherent","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":185170,"byte_end":185177,"line_start":272,"line_end":272,"column_start":12,"column_end":19},"value":"","parent":null,"children":[{"krate":0,"index":1085},{"krate":0,"index":1086},{"krate":0,"index":1087},{"krate":0,"index":1088},{"krate":0,"index":1089},{"krate":0,"index":1090},{"krate":0,"index":1091},{"krate":0,"index":1092},{"krate":0,"index":1094},{"krate":0,"index":1096},{"krate":0,"index":1098},{"krate":0,"index":1100},{"krate":0,"index":1102},{"krate":0,"index":1105},{"krate":0,"index":1107},{"krate":0,"index":1109},{"krate":0,"index":1110},{"krate":0,"index":1111},{"krate":0,"index":1112},{"krate":0,"index":1114},{"krate":0,"index":1117}],"docs":"","sig":null,"attributes":[]},{"id":129,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":201265,"byte_end":201272,"line_start":802,"line_end":802,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1123}],"docs":"","sig":null,"attributes":[]},{"id":130,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":201520,"byte_end":201527,"line_start":816,"line_end":816,"column_start":19,"column_end":26},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":131,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":201609,"byte_end":201616,"line_start":823,"line_end":823,"column_start":27,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1131}],"docs":"","sig":null,"attributes":[]},{"id":132,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":201837,"byte_end":201844,"line_start":833,"line_end":833,"column_start":32,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1135}],"docs":"","sig":null,"attributes":[]},{"id":133,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":202117,"byte_end":202124,"line_start":846,"line_end":846,"column_start":26,"column_end":33},"value":"","parent":null,"children":[{"krate":0,"index":1140}],"docs":"","sig":null,"attributes":[]},{"id":134,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":202356,"byte_end":202363,"line_start":857,"line_end":857,"column_start":34,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1147}],"docs":"","sig":null,"attributes":[]},{"id":135,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":202589,"byte_end":202596,"line_start":868,"line_end":868,"column_start":24,"column_end":31},"value":"","parent":null,"children":[{"krate":0,"index":1152}],"docs":"","sig":null,"attributes":[]},{"id":136,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":208959,"byte_end":208966,"line_start":1103,"line_end":1103,"column_start":29,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1216},{"krate":0,"index":1217},{"krate":0,"index":1218}],"docs":"","sig":null,"attributes":[]},{"id":137,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":209806,"byte_end":209810,"line_start":1135,"line_end":1135,"column_start":19,"column_end":23},"value":"","parent":null,"children":[{"krate":0,"index":1221}],"docs":"","sig":null,"attributes":[]},{"id":138,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":209959,"byte_end":209963,"line_start":1143,"line_end":1143,"column_start":26,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1225},{"krate":0,"index":1226},{"krate":0,"index":1227}],"docs":"","sig":null,"attributes":[]},{"id":139,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210222,"byte_end":210226,"line_start":1155,"line_end":1155,"column_start":35,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1231}],"docs":"","sig":null,"attributes":[]},{"id":140,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210337,"byte_end":210341,"line_start":1161,"line_end":1161,"column_start":27,"column_end":31},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":141,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210388,"byte_end":210392,"line_start":1163,"line_end":1163,"column_start":36,"column_end":40},"value":"","parent":null,"children":[{"krate":0,"index":1236}],"docs":"","sig":null,"attributes":[]},{"id":142,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210549,"byte_end":210557,"line_start":1169,"line_end":1169,"column_start":22,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":1239},{"krate":0,"index":1240},{"krate":0,"index":1242}],"docs":"","sig":null,"attributes":[]},{"id":143,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210816,"byte_end":210824,"line_start":1181,"line_end":1181,"column_start":31,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1245}],"docs":"","sig":null,"attributes":[]},{"id":144,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210931,"byte_end":210939,"line_start":1187,"line_end":1187,"column_start":27,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":145,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210982,"byte_end":210990,"line_start":1189,"line_end":1189,"column_start":36,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":1250}],"docs":"","sig":null,"attributes":[]},{"id":146,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":211204,"byte_end":211209,"line_start":1196,"line_end":1196,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1254},{"krate":0,"index":1255},{"krate":0,"index":1257}],"docs":"","sig":null,"attributes":[]},{"id":147,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":211472,"byte_end":211477,"line_start":1208,"line_end":1208,"column_start":31,"column_end":36},"value":"","parent":null,"children":[{"krate":0,"index":1260}],"docs":"","sig":null,"attributes":[]},{"id":148,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":211588,"byte_end":211593,"line_start":1214,"line_end":1214,"column_start":27,"column_end":32},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":149,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":211640,"byte_end":211645,"line_start":1216,"line_end":1216,"column_start":36,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1265}],"docs":"","sig":null,"attributes":[]},{"id":150,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":211863,"byte_end":211875,"line_start":1223,"line_end":1223,"column_start":22,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1270}],"docs":"","sig":null,"attributes":[]},{"id":151,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":212059,"byte_end":212071,"line_start":1233,"line_end":1233,"column_start":29,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1275},{"krate":0,"index":1276},{"krate":0,"index":1277}],"docs":"","sig":null,"attributes":[]},{"id":152,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":212539,"byte_end":212551,"line_start":1257,"line_end":1257,"column_start":27,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1281}],"docs":"","sig":null,"attributes":[]},{"id":153,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":212776,"byte_end":212788,"line_start":1267,"line_end":1267,"column_start":30,"column_end":42},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":154,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":212869,"byte_end":212879,"line_start":1274,"line_end":1274,"column_start":22,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1288}],"docs":"","sig":null,"attributes":[]},{"id":155,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":213061,"byte_end":213071,"line_start":1284,"line_end":1284,"column_start":29,"column_end":39},"value":"","parent":null,"children":[{"krate":0,"index":1293},{"krate":0,"index":1294},{"krate":0,"index":1295}],"docs":"","sig":null,"attributes":[]},{"id":156,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":213543,"byte_end":213553,"line_start":1308,"line_end":1308,"column_start":30,"column_end":40},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":157,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":213639,"byte_end":213649,"line_start":1315,"line_end":1315,"column_start":27,"column_end":37},"value":"","parent":null,"children":[{"krate":0,"index":1302}],"docs":"","sig":null,"attributes":[]},{"id":158,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":213866,"byte_end":213885,"line_start":1325,"line_end":1325,"column_start":22,"column_end":41},"value":"","parent":null,"children":[{"krate":0,"index":1306}],"docs":"","sig":null,"attributes":[]},{"id":159,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214056,"byte_end":214075,"line_start":1334,"line_end":1334,"column_start":29,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":1311},{"krate":0,"index":1312},{"krate":0,"index":1313}],"docs":"","sig":null,"attributes":[]},{"id":160,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214377,"byte_end":214396,"line_start":1351,"line_end":1351,"column_start":30,"column_end":49},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":161,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214482,"byte_end":214501,"line_start":1358,"line_end":1358,"column_start":27,"column_end":46},"value":"","parent":null,"children":[{"krate":0,"index":1320}],"docs":"","sig":null,"attributes":[]},{"id":162,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214718,"byte_end":214723,"line_start":1368,"line_end":1368,"column_start":22,"column_end":27},"value":"","parent":null,"children":[{"krate":0,"index":1324}],"docs":"","sig":null,"attributes":[]},{"id":163,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214881,"byte_end":214886,"line_start":1377,"line_end":1377,"column_start":30,"column_end":35},"value":"","parent":null,"children":[],"docs":"","sig":null,"attributes":[]},{"id":164,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214972,"byte_end":214977,"line_start":1384,"line_end":1384,"column_start":27,"column_end":32},"value":"","parent":null,"children":[{"krate":0,"index":1331}],"docs":"","sig":null,"attributes":[]},{"id":165,"kind":"Direct","span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":215201,"byte_end":215206,"line_start":1394,"line_end":1394,"column_start":29,"column_end":34},"value":"","parent":null,"children":[{"krate":0,"index":1336},{"krate":0,"index":1337},{"krate":0,"index":1338}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/fx.rs","byte_start":5722,"byte_end":5730,"line_start":31,"line_end":31,"column_start":18,"column_end":26},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":25},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/fx.rs","byte_start":5813,"byte_end":5821,"line_start":38,"line_end":38,"column_start":6,"column_end":14},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":25},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/fx.rs","byte_start":5977,"byte_end":5985,"line_start":45,"line_end":45,"column_start":17,"column_end":25},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":25},"to":{"krate":2,"index":6486}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":15057,"byte_end":15064,"line_start":200,"line_end":200,"column_start":12,"column_end":19},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":1368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":16042,"byte_end":16049,"line_start":234,"line_end":234,"column_start":15,"column_end":22},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":1368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":24293,"byte_end":24300,"line_start":551,"line_end":551,"column_start":15,"column_end":22},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":1368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":36872,"byte_end":36879,"line_start":954,"line_end":954,"column_start":15,"column_end":22},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":1368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":39768,"byte_end":39775,"line_start":1015,"line_end":1015,"column_start":29,"column_end":36},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":1368},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":40096,"byte_end":40103,"line_start":1031,"line_end":1031,"column_start":22,"column_end":29},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":1368},"to":{"krate":2,"index":1940}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":40197,"byte_end":40204,"line_start":1039,"line_end":1039,"column_start":25,"column_end":32},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":1368},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":40420,"byte_end":40427,"line_start":1050,"line_end":1050,"column_start":27,"column_end":34},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":1368},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":40696,"byte_end":40703,"line_start":1061,"line_end":1061,"column_start":40,"column_end":47},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":1368},"to":{"krate":2,"index":1677}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":41514,"byte_end":41518,"line_start":1093,"line_end":1093,"column_start":22,"column_end":26},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":161},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":41721,"byte_end":41725,"line_start":1103,"line_end":1103,"column_start":41,"column_end":45},"kind":{"Impl":{"id":13}},"from":{"krate":0,"index":161},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":42503,"byte_end":42510,"line_start":1125,"line_end":1125,"column_start":40,"column_end":47},"kind":{"Impl":{"id":14}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":1437}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":42536,"byte_end":42543,"line_start":1127,"line_end":1127,"column_start":12,"column_end":19},"kind":{"Impl":{"id":15}},"from":{"krate":0,"index":175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":43183,"byte_end":43191,"line_start":1149,"line_end":1149,"column_start":12,"column_end":20},"kind":{"Impl":{"id":16}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":43811,"byte_end":43815,"line_start":1172,"line_end":1172,"column_start":22,"column_end":26},"kind":{"Impl":{"id":17}},"from":{"krate":0,"index":196},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":43978,"byte_end":43982,"line_start":1181,"line_end":1181,"column_start":34,"column_end":38},"kind":{"Impl":{"id":18}},"from":{"krate":0,"index":196},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":44506,"byte_end":44512,"line_start":1199,"line_end":1199,"column_start":22,"column_end":28},"kind":{"Impl":{"id":19}},"from":{"krate":0,"index":209},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":44677,"byte_end":44683,"line_start":1208,"line_end":1208,"column_start":34,"column_end":40},"kind":{"Impl":{"id":20}},"from":{"krate":0,"index":209},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":45153,"byte_end":45158,"line_start":1225,"line_end":1225,"column_start":12,"column_end":17},"kind":{"Impl":{"id":21}},"from":{"krate":0,"index":222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":47396,"byte_end":47414,"line_start":1299,"line_end":1299,"column_start":19,"column_end":37},"kind":{"Impl":{"id":22}},"from":{"krate":0,"index":236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":48206,"byte_end":48224,"line_start":1328,"line_end":1328,"column_start":19,"column_end":37},"kind":{"Impl":{"id":23}},"from":{"krate":0,"index":236},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":49136,"byte_end":49151,"line_start":1360,"line_end":1360,"column_start":19,"column_end":34},"kind":{"Impl":{"id":24}},"from":{"krate":0,"index":266},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":50530,"byte_end":50541,"line_start":1413,"line_end":1413,"column_start":19,"column_end":30},"kind":{"Impl":{"id":25}},"from":{"krate":0,"index":242},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":53546,"byte_end":53565,"line_start":1514,"line_end":1514,"column_start":16,"column_end":35},"kind":{"Impl":{"id":26}},"from":{"krate":0,"index":253},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":56295,"byte_end":56312,"line_start":1609,"line_end":1609,"column_start":19,"column_end":36},"kind":{"Impl":{"id":27}},"from":{"krate":0,"index":259},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":57706,"byte_end":57724,"line_start":1657,"line_end":1657,"column_start":25,"column_end":43},"kind":{"Impl":{"id":28}},"from":{"krate":0,"index":236},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":57901,"byte_end":57912,"line_start":1663,"line_end":1663,"column_start":39,"column_end":50},"kind":{"Impl":{"id":29}},"from":{"krate":0,"index":242},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":58243,"byte_end":58262,"line_start":1672,"line_end":1672,"column_start":36,"column_end":55},"kind":{"Impl":{"id":30}},"from":{"krate":0,"index":253},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":58517,"byte_end":58534,"line_start":1681,"line_end":1681,"column_start":25,"column_end":42},"kind":{"Impl":{"id":31}},"from":{"krate":0,"index":259},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":58699,"byte_end":58714,"line_start":1687,"line_end":1687,"column_start":25,"column_end":40},"kind":{"Impl":{"id":32}},"from":{"krate":0,"index":266},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":59315,"byte_end":59320,"line_start":1707,"line_end":1707,"column_start":39,"column_end":44},"kind":{"Impl":{"id":33}},"from":{"krate":0,"index":372},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":59877,"byte_end":59890,"line_start":1726,"line_end":1726,"column_start":31,"column_end":44},"kind":{"Impl":{"id":34}},"from":{"krate":0,"index":388},"to":{"krate":2,"index":1437}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":59983,"byte_end":59996,"line_start":1733,"line_end":1733,"column_start":31,"column_end":44},"kind":{"Impl":{"id":35}},"from":{"krate":0,"index":388},"to":{"krate":2,"index":1446}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":60098,"byte_end":60111,"line_start":1741,"line_end":1741,"column_start":39,"column_end":52},"kind":{"Impl":{"id":36}},"from":{"krate":0,"index":388},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":60595,"byte_end":60606,"line_start":1760,"line_end":1760,"column_start":32,"column_end":43},"kind":{"Impl":{"id":37}},"from":{"krate":0,"index":409},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":61233,"byte_end":61240,"line_start":1786,"line_end":1786,"column_start":32,"column_end":39},"kind":{"Impl":{"id":38}},"from":{"krate":0,"index":1368},"to":{"krate":2,"index":3392}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":61984,"byte_end":61988,"line_start":1815,"line_end":1815,"column_start":29,"column_end":33},"kind":{"Impl":{"id":39}},"from":{"krate":0,"index":161},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":62354,"byte_end":62358,"line_start":1830,"line_end":1830,"column_start":34,"column_end":38},"kind":{"Impl":{"id":40}},"from":{"krate":0,"index":161},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":62477,"byte_end":62481,"line_start":1837,"line_end":1837,"column_start":30,"column_end":34},"kind":{"Impl":{"id":41}},"from":{"krate":0,"index":161},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":62524,"byte_end":62531,"line_start":1839,"line_end":1839,"column_start":29,"column_end":36},"kind":{"Impl":{"id":42}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":62909,"byte_end":62916,"line_start":1854,"line_end":1854,"column_start":34,"column_end":41},"kind":{"Impl":{"id":43}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63034,"byte_end":63041,"line_start":1860,"line_end":1860,"column_start":30,"column_end":37},"kind":{"Impl":{"id":44}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63082,"byte_end":63089,"line_start":1862,"line_end":1862,"column_start":27,"column_end":34},"kind":{"Impl":{"id":45}},"from":{"krate":0,"index":175},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63295,"byte_end":63303,"line_start":1872,"line_end":1872,"column_start":25,"column_end":33},"kind":{"Impl":{"id":46}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63564,"byte_end":63572,"line_start":1884,"line_end":1884,"column_start":34,"column_end":42},"kind":{"Impl":{"id":47}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63686,"byte_end":63694,"line_start":1890,"line_end":1890,"column_start":30,"column_end":38},"kind":{"Impl":{"id":48}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63745,"byte_end":63753,"line_start":1892,"line_end":1892,"column_start":41,"column_end":49},"kind":{"Impl":{"id":49}},"from":{"krate":0,"index":188},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":63915,"byte_end":63919,"line_start":1898,"line_end":1898,"column_start":29,"column_end":33},"kind":{"Impl":{"id":50}},"from":{"krate":0,"index":196},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64200,"byte_end":64204,"line_start":1910,"line_end":1910,"column_start":34,"column_end":38},"kind":{"Impl":{"id":51}},"from":{"krate":0,"index":196},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64322,"byte_end":64326,"line_start":1916,"line_end":1916,"column_start":30,"column_end":34},"kind":{"Impl":{"id":52}},"from":{"krate":0,"index":196},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64369,"byte_end":64375,"line_start":1918,"line_end":1918,"column_start":29,"column_end":35},"kind":{"Impl":{"id":53}},"from":{"krate":0,"index":209},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64656,"byte_end":64662,"line_start":1930,"line_end":1930,"column_start":34,"column_end":40},"kind":{"Impl":{"id":54}},"from":{"krate":0,"index":209},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64780,"byte_end":64786,"line_start":1936,"line_end":1936,"column_start":30,"column_end":36},"kind":{"Impl":{"id":55}},"from":{"krate":0,"index":209},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":64829,"byte_end":64838,"line_start":1938,"line_end":1938,"column_start":29,"column_end":38},"kind":{"Impl":{"id":56}},"from":{"krate":0,"index":231},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65127,"byte_end":65136,"line_start":1950,"line_end":1950,"column_start":34,"column_end":43},"kind":{"Impl":{"id":57}},"from":{"krate":0,"index":231},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65254,"byte_end":65263,"line_start":1956,"line_end":1956,"column_start":30,"column_end":39},"kind":{"Impl":{"id":58}},"from":{"krate":0,"index":231},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65304,"byte_end":65313,"line_start":1958,"line_end":1958,"column_start":27,"column_end":36},"kind":{"Impl":{"id":59}},"from":{"krate":0,"index":231},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65529,"byte_end":65534,"line_start":1968,"line_end":1968,"column_start":29,"column_end":34},"kind":{"Impl":{"id":60}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65799,"byte_end":65804,"line_start":1980,"line_end":1980,"column_start":34,"column_end":39},"kind":{"Impl":{"id":61}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65922,"byte_end":65927,"line_start":1986,"line_end":1986,"column_start":30,"column_end":35},"kind":{"Impl":{"id":62}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":65968,"byte_end":65973,"line_start":1988,"line_end":1988,"column_start":27,"column_end":32},"kind":{"Impl":{"id":63}},"from":{"krate":0,"index":222},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":66173,"byte_end":66178,"line_start":1998,"line_end":1998,"column_start":19,"column_end":24},"kind":{"Impl":{"id":64}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":69140,"byte_end":69145,"line_start":2107,"line_end":2107,"column_start":28,"column_end":33},"kind":{"Impl":{"id":65}},"from":{"krate":0,"index":372},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":69901,"byte_end":69914,"line_start":2136,"line_end":2136,"column_start":19,"column_end":32},"kind":{"Impl":{"id":66}},"from":{"krate":0,"index":388},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":76569,"byte_end":76580,"line_start":2366,"line_end":2366,"column_start":19,"column_end":30},"kind":{"Impl":{"id":67}},"from":{"krate":0,"index":409},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":78254,"byte_end":78261,"line_start":2432,"line_end":2432,"column_start":40,"column_end":47},"kind":{"Impl":{"id":68}},"from":{"krate":0,"index":1368},"to":{"krate":2,"index":3388}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":78663,"byte_end":78670,"line_start":2448,"line_end":2448,"column_start":34,"column_end":41},"kind":{"Impl":{"id":69}},"from":{"krate":0,"index":1368},"to":{"krate":2,"index":3401}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/map.rs","byte_start":79422,"byte_end":79429,"line_start":2472,"line_end":2472,"column_start":46,"column_end":53},"kind":{"Impl":{"id":70}},"from":{"krate":0,"index":1368},"to":{"krate":2,"index":3401}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/sse2.rs","byte_start":5317831,"byte_end":5317836,"line_start":23,"line_end":23,"column_start":6,"column_end":11},"kind":{"Impl":{"id":71}},"from":{"krate":0,"index":1404},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":158079,"byte_end":158086,"line_start":20,"line_end":20,"column_start":6,"column_end":13},"kind":{"Impl":{"id":72}},"from":{"krate":0,"index":1410},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":160199,"byte_end":160206,"line_start":85,"line_end":85,"column_start":23,"column_end":30},"kind":{"Impl":{"id":73}},"from":{"krate":0,"index":1410},"to":{"krate":2,"index":3392}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/bitmask.rs","byte_start":160494,"byte_end":160505,"line_start":99,"line_end":99,"column_start":19,"column_end":30},"kind":{"Impl":{"id":74}},"from":{"krate":0,"index":686},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":111872,"byte_end":111883,"line_start":72,"line_end":72,"column_start":6,"column_end":17},"kind":{"Impl":{"id":75}},"from":{"krate":0,"index":1416},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":114543,"byte_end":114551,"line_start":152,"line_end":152,"column_start":19,"column_end":27},"kind":{"Impl":{"id":76}},"from":{"krate":0,"index":709},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":118620,"byte_end":118626,"line_start":265,"line_end":265,"column_start":25,"column_end":31},"kind":{"Impl":{"id":77}},"from":{"krate":0,"index":720},"to":{"krate":2,"index":1437}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":118652,"byte_end":118658,"line_start":267,"line_end":267,"column_start":19,"column_end":25},"kind":{"Impl":{"id":78}},"from":{"krate":0,"index":720},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":118756,"byte_end":118762,"line_start":274,"line_end":274,"column_start":9,"column_end":15},"kind":{"Impl":{"id":79}},"from":{"krate":0,"index":720},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":120780,"byte_end":120788,"line_start":350,"line_end":350,"column_start":9,"column_end":17},"kind":{"Impl":{"id":80}},"from":{"krate":0,"index":741},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":144279,"byte_end":144287,"line_start":948,"line_end":948,"column_start":25,"column_end":33},"kind":{"Impl":{"id":81}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":1437}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":144332,"byte_end":144340,"line_start":949,"line_end":949,"column_start":25,"column_end":33},"kind":{"Impl":{"id":82}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":1446}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":144387,"byte_end":144395,"line_start":951,"line_end":951,"column_start":26,"column_end":34},"kind":{"Impl":{"id":83}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":146458,"byte_end":146466,"line_start":1004,"line_end":1004,"column_start":39,"column_end":47},"kind":{"Impl":{"id":84}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":1623}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":147234,"byte_end":147242,"line_start":1036,"line_end":1036,"column_start":26,"column_end":34},"kind":{"Impl":{"id":85}},"from":{"krate":0,"index":741},"to":{"krate":2,"index":3392}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":148169,"byte_end":148181,"line_start":1072,"line_end":1072,"column_start":9,"column_end":21},"kind":{"Impl":{"id":86}},"from":{"krate":0,"index":820},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":150857,"byte_end":150869,"line_start":1138,"line_end":1138,"column_start":25,"column_end":37},"kind":{"Impl":{"id":87}},"from":{"krate":0,"index":820},"to":{"krate":2,"index":1437}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":150900,"byte_end":150912,"line_start":1139,"line_end":1139,"column_start":25,"column_end":37},"kind":{"Impl":{"id":88}},"from":{"krate":0,"index":820},"to":{"krate":2,"index":1446}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":150938,"byte_end":150950,"line_start":1141,"line_end":1141,"column_start":19,"column_end":31},"kind":{"Impl":{"id":89}},"from":{"krate":0,"index":820},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":151205,"byte_end":151217,"line_start":1153,"line_end":1153,"column_start":22,"column_end":34},"kind":{"Impl":{"id":90}},"from":{"krate":0,"index":820},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":152608,"byte_end":152620,"line_start":1191,"line_end":1191,"column_start":27,"column_end":39},"kind":{"Impl":{"id":91}},"from":{"krate":0,"index":820},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":152798,"byte_end":152805,"line_start":1199,"line_end":1199,"column_start":19,"column_end":26},"kind":{"Impl":{"id":92}},"from":{"krate":0,"index":843},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":152978,"byte_end":152985,"line_start":1209,"line_end":1209,"column_start":22,"column_end":29},"kind":{"Impl":{"id":93}},"from":{"krate":0,"index":843},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":153600,"byte_end":153607,"line_start":1232,"line_end":1232,"column_start":31,"column_end":38},"kind":{"Impl":{"id":94}},"from":{"krate":0,"index":843},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":153640,"byte_end":153647,"line_start":1233,"line_end":1233,"column_start":27,"column_end":34},"kind":{"Impl":{"id":95}},"from":{"krate":0,"index":843},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":153844,"byte_end":153855,"line_start":1242,"line_end":1242,"column_start":9,"column_end":20},"kind":{"Impl":{"id":96}},"from":{"krate":0,"index":859},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":153973,"byte_end":153984,"line_start":1249,"line_end":1249,"column_start":25,"column_end":36},"kind":{"Impl":{"id":97}},"from":{"krate":0,"index":859},"to":{"krate":2,"index":1437}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":154029,"byte_end":154040,"line_start":1250,"line_end":1250,"column_start":25,"column_end":36},"kind":{"Impl":{"id":98}},"from":{"krate":0,"index":859},"to":{"krate":2,"index":1446}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":154128,"byte_end":154139,"line_start":1253,"line_end":1253,"column_start":39,"column_end":50},"kind":{"Impl":{"id":99}},"from":{"krate":0,"index":859},"to":{"krate":2,"index":1623}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":155086,"byte_end":155097,"line_start":1291,"line_end":1291,"column_start":22,"column_end":33},"kind":{"Impl":{"id":100}},"from":{"krate":0,"index":859},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":155367,"byte_end":155378,"line_start":1305,"line_end":1305,"column_start":31,"column_end":42},"kind":{"Impl":{"id":101}},"from":{"krate":0,"index":859},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":155411,"byte_end":155422,"line_start":1306,"line_end":1306,"column_start":27,"column_end":38},"kind":{"Impl":{"id":102}},"from":{"krate":0,"index":859},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":155962,"byte_end":155970,"line_start":1323,"line_end":1323,"column_start":9,"column_end":17},"kind":{"Impl":{"id":103}},"from":{"krate":0,"index":883},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":156092,"byte_end":156100,"line_start":1330,"line_end":1330,"column_start":25,"column_end":33},"kind":{"Impl":{"id":104}},"from":{"krate":0,"index":883},"to":{"krate":2,"index":1437}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":156149,"byte_end":156157,"line_start":1331,"line_end":1331,"column_start":25,"column_end":33},"kind":{"Impl":{"id":105}},"from":{"krate":0,"index":883},"to":{"krate":2,"index":1446}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":156200,"byte_end":156208,"line_start":1333,"line_end":1333,"column_start":18,"column_end":26},"kind":{"Impl":{"id":106}},"from":{"krate":0,"index":883},"to":{"krate":2,"index":1623}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":156877,"byte_end":156885,"line_start":1356,"line_end":1356,"column_start":22,"column_end":30},"kind":{"Impl":{"id":107}},"from":{"krate":0,"index":883},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":157208,"byte_end":157216,"line_start":1373,"line_end":1373,"column_start":31,"column_end":39},"kind":{"Impl":{"id":108}},"from":{"krate":0,"index":883},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/raw/mod.rs","byte_start":157253,"byte_end":157261,"line_start":1374,"line_end":1374,"column_start":27,"column_end":35},"kind":{"Impl":{"id":109}},"from":{"krate":0,"index":883},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":160932,"byte_end":160939,"line_start":8,"line_end":8,"column_start":15,"column_end":22},"kind":{"Impl":{"id":110}},"from":{"krate":0,"index":1368},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":162807,"byte_end":162817,"line_start":70,"line_end":70,"column_start":36,"column_end":46},"kind":{"Impl":{"id":111}},"from":{"krate":0,"index":934},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":163371,"byte_end":163389,"line_start":89,"line_end":89,"column_start":28,"column_end":46},"kind":{"Impl":{"id":112}},"from":{"krate":0,"index":948},"to":{"krate":2,"index":1437}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":163463,"byte_end":163481,"line_start":95,"line_end":95,"column_start":28,"column_end":46},"kind":{"Impl":{"id":113}},"from":{"krate":0,"index":948},"to":{"krate":2,"index":1446}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":163564,"byte_end":163582,"line_start":102,"line_end":102,"column_start":36,"column_end":54},"kind":{"Impl":{"id":114}},"from":{"krate":0,"index":948},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":164077,"byte_end":164093,"line_start":121,"line_end":121,"column_start":29,"column_end":45},"kind":{"Impl":{"id":115}},"from":{"krate":0,"index":965},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":164257,"byte_end":164267,"line_start":127,"line_end":127,"column_start":16,"column_end":26},"kind":{"Impl":{"id":116}},"from":{"krate":0,"index":934},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":167141,"byte_end":167151,"line_start":234,"line_end":234,"column_start":25,"column_end":35},"kind":{"Impl":{"id":117}},"from":{"krate":0,"index":934},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":167869,"byte_end":167887,"line_start":262,"line_end":262,"column_start":16,"column_end":34},"kind":{"Impl":{"id":118}},"from":{"krate":0,"index":948},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":174731,"byte_end":174747,"line_start":492,"line_end":492,"column_start":16,"column_end":32},"kind":{"Impl":{"id":119}},"from":{"krate":0,"index":965},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176273,"byte_end":176280,"line_start":551,"line_end":551,"column_start":12,"column_end":19},"kind":{"Impl":{"id":120}},"from":{"krate":0,"index":175},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176463,"byte_end":176471,"line_start":559,"line_end":559,"column_start":12,"column_end":20},"kind":{"Impl":{"id":121}},"from":{"krate":0,"index":188},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/rustc_entry.rs","byte_start":176650,"byte_end":176655,"line_start":567,"line_end":567,"column_start":12,"column_end":17},"kind":{"Impl":{"id":122}},"from":{"krate":0,"index":222},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/scopeguard.rs","byte_start":177148,"byte_end":177158,"line_start":20,"line_end":20,"column_start":22,"column_end":32},"kind":{"Impl":{"id":123}},"from":{"krate":0,"index":1027},"to":{"krate":2,"index":1601}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/scopeguard.rs","byte_start":177311,"byte_end":177321,"line_start":31,"line_end":31,"column_start":25,"column_end":35},"kind":{"Impl":{"id":124}},"from":{"krate":0,"index":1027},"to":{"krate":2,"index":1612}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/scopeguard.rs","byte_start":177465,"byte_end":177475,"line_start":41,"line_end":41,"column_start":21,"column_end":31},"kind":{"Impl":{"id":125}},"from":{"krate":0,"index":1027},"to":{"krate":2,"index":1623}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":181624,"byte_end":181631,"line_start":119,"line_end":119,"column_start":20,"column_end":27},"kind":{"Impl":{"id":126}},"from":{"krate":0,"index":1424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":182652,"byte_end":182659,"line_start":158,"line_end":158,"column_start":12,"column_end":19},"kind":{"Impl":{"id":127}},"from":{"krate":0,"index":1424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":185170,"byte_end":185177,"line_start":272,"line_end":272,"column_start":12,"column_end":19},"kind":{"Impl":{"id":128}},"from":{"krate":0,"index":1424},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":201265,"byte_end":201272,"line_start":802,"line_end":802,"column_start":26,"column_end":33},"kind":{"Impl":{"id":129}},"from":{"krate":0,"index":1424},"to":{"krate":2,"index":1936}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":201520,"byte_end":201527,"line_start":816,"line_end":816,"column_start":19,"column_end":26},"kind":{"Impl":{"id":130}},"from":{"krate":0,"index":1424},"to":{"krate":2,"index":1940}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":201609,"byte_end":201616,"line_start":823,"line_end":823,"column_start":27,"column_end":34},"kind":{"Impl":{"id":131}},"from":{"krate":0,"index":1424},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":201837,"byte_end":201844,"line_start":833,"line_end":833,"column_start":32,"column_end":39},"kind":{"Impl":{"id":132}},"from":{"krate":0,"index":1424},"to":{"krate":2,"index":3388}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":202117,"byte_end":202124,"line_start":846,"line_end":846,"column_start":26,"column_end":33},"kind":{"Impl":{"id":133}},"from":{"krate":0,"index":1424},"to":{"krate":2,"index":3401}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":202356,"byte_end":202363,"line_start":857,"line_end":857,"column_start":34,"column_end":41},"kind":{"Impl":{"id":134}},"from":{"krate":0,"index":1424},"to":{"krate":2,"index":3401}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":202589,"byte_end":202596,"line_start":868,"line_end":868,"column_start":24,"column_end":31},"kind":{"Impl":{"id":135}},"from":{"krate":0,"index":1424},"to":{"krate":2,"index":2080}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":208959,"byte_end":208966,"line_start":1103,"line_end":1103,"column_start":29,"column_end":36},"kind":{"Impl":{"id":136}},"from":{"krate":0,"index":1424},"to":{"krate":2,"index":3392}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":209806,"byte_end":209810,"line_start":1135,"line_end":1135,"column_start":19,"column_end":23},"kind":{"Impl":{"id":137}},"from":{"krate":0,"index":1173},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":209959,"byte_end":209963,"line_start":1143,"line_end":1143,"column_start":26,"column_end":30},"kind":{"Impl":{"id":138}},"from":{"krate":0,"index":1173},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210222,"byte_end":210226,"line_start":1155,"line_end":1155,"column_start":35,"column_end":39},"kind":{"Impl":{"id":139}},"from":{"krate":0,"index":1173},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210337,"byte_end":210341,"line_start":1161,"line_end":1161,"column_start":27,"column_end":31},"kind":{"Impl":{"id":140}},"from":{"krate":0,"index":1173},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210388,"byte_end":210392,"line_start":1163,"line_end":1163,"column_start":36,"column_end":40},"kind":{"Impl":{"id":141}},"from":{"krate":0,"index":1173},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210549,"byte_end":210557,"line_start":1169,"line_end":1169,"column_start":22,"column_end":30},"kind":{"Impl":{"id":142}},"from":{"krate":0,"index":1177},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210816,"byte_end":210824,"line_start":1181,"line_end":1181,"column_start":31,"column_end":39},"kind":{"Impl":{"id":143}},"from":{"krate":0,"index":1177},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210931,"byte_end":210939,"line_start":1187,"line_end":1187,"column_start":27,"column_end":35},"kind":{"Impl":{"id":144}},"from":{"krate":0,"index":1177},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":210982,"byte_end":210990,"line_start":1189,"line_end":1189,"column_start":36,"column_end":44},"kind":{"Impl":{"id":145}},"from":{"krate":0,"index":1177},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":211204,"byte_end":211209,"line_start":1196,"line_end":1196,"column_start":22,"column_end":27},"kind":{"Impl":{"id":146}},"from":{"krate":0,"index":1180},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":211472,"byte_end":211477,"line_start":1208,"line_end":1208,"column_start":31,"column_end":36},"kind":{"Impl":{"id":147}},"from":{"krate":0,"index":1180},"to":{"krate":2,"index":3380}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":211588,"byte_end":211593,"line_start":1214,"line_end":1214,"column_start":27,"column_end":32},"kind":{"Impl":{"id":148}},"from":{"krate":0,"index":1180},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":211640,"byte_end":211645,"line_start":1216,"line_end":1216,"column_start":36,"column_end":41},"kind":{"Impl":{"id":149}},"from":{"krate":0,"index":1180},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":211863,"byte_end":211875,"line_start":1223,"line_end":1223,"column_start":22,"column_end":34},"kind":{"Impl":{"id":150}},"from":{"krate":0,"index":1184},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":212059,"byte_end":212071,"line_start":1233,"line_end":1233,"column_start":29,"column_end":41},"kind":{"Impl":{"id":151}},"from":{"krate":0,"index":1184},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":212539,"byte_end":212551,"line_start":1257,"line_end":1257,"column_start":27,"column_end":39},"kind":{"Impl":{"id":152}},"from":{"krate":0,"index":1184},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":212776,"byte_end":212788,"line_start":1267,"line_end":1267,"column_start":30,"column_end":42},"kind":{"Impl":{"id":153}},"from":{"krate":0,"index":1184},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":212869,"byte_end":212879,"line_start":1274,"line_end":1274,"column_start":22,"column_end":32},"kind":{"Impl":{"id":154}},"from":{"krate":0,"index":1190},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":213061,"byte_end":213071,"line_start":1284,"line_end":1284,"column_start":29,"column_end":39},"kind":{"Impl":{"id":155}},"from":{"krate":0,"index":1190},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":213543,"byte_end":213553,"line_start":1308,"line_end":1308,"column_start":30,"column_end":40},"kind":{"Impl":{"id":156}},"from":{"krate":0,"index":1190},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":213639,"byte_end":213649,"line_start":1315,"line_end":1315,"column_start":27,"column_end":37},"kind":{"Impl":{"id":157}},"from":{"krate":0,"index":1190},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":213866,"byte_end":213885,"line_start":1325,"line_end":1325,"column_start":22,"column_end":41},"kind":{"Impl":{"id":158}},"from":{"krate":0,"index":1196},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214056,"byte_end":214075,"line_start":1334,"line_end":1334,"column_start":29,"column_end":48},"kind":{"Impl":{"id":159}},"from":{"krate":0,"index":1196},"to":{"krate":2,"index":3202}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214377,"byte_end":214396,"line_start":1351,"line_end":1351,"column_start":30,"column_end":49},"kind":{"Impl":{"id":160}},"from":{"krate":0,"index":1196},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214482,"byte_end":214501,"line_start":1358,"line_end":1358,"column_start":27,"column_end":46},"kind":{"Impl":{"id":161}},"from":{"krate":0,"index":1196},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214718,"byte_end":214723,"line_start":1368,"line_end":1368,"column_start":22,"column_end":27},"kind":{"Impl":{"id":162}},"from":{"krate":0,"index":1201},"to":{"krate":2,"index":2056}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214881,"byte_end":214886,"line_start":1377,"line_end":1377,"column_start":30,"column_end":35},"kind":{"Impl":{"id":163}},"from":{"krate":0,"index":1201},"to":{"krate":2,"index":3491}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":214972,"byte_end":214977,"line_start":1384,"line_end":1384,"column_start":27,"column_end":32},"kind":{"Impl":{"id":164}},"from":{"krate":0,"index":1201},"to":{"krate":2,"index":6824}},{"span":{"file_name":"/cargo/registry/src/github.com-1ecc6299db9ec823/hashbrown-0.4.0/src/set.rs","byte_start":215201,"byte_end":215206,"line_start":1394,"line_end":1394,"column_start":29,"column_end":34},"kind":{"Impl":{"id":165}},"from":{"krate":0,"index":1201},"to":{"krate":2,"index":3202}}]}